from the original GATEONEQFOURIER

    # @staticmethod
    # def compute_expectations(qc, simulator, shots):
    #     backend = qiskit_aer.Aer.get_backend(simulator)
    #     if simulator == 'qasm_simulator':
    #         qc.measure_all()
    #         result = backend.run(qc, shots=shots).result()
    #         counts = result.get_counts()
    #         probability_0 = counts.get('0', 0) / shots  # Probability of measuring |0> state - expectation value
    #     else:  # if simulator == 'statevector_simulator':
    #         result = backend.run(qc).result()
    #         statevector = result.get_statevector()
    #         probability_0 = prob(statevector.data[0])
    #     return 2 * probability_0 - 1  # Map to [-1, 1]
    #
    # def predict_interval(self, simulator, shots, x, plot=False):
    #     f_x = []
    #     for i in range(len(x)):
    #         qc = self.define_circuit(x[i])
    #         f_x.append(self.compute_expectations(qc, simulator, shots).item())
    #
    #     if plot:
    #         fx.plot_fx_advanced(x, f_x, "Gate level Fourier Model Prediction")
    #     return f_x
    #
    # def predict_single(self, simulator, shots, x):
    #     qc = self.define_circuit(x)
    #     f_x = self.compute_expectations(qc, simulator, shots)
    #     return f_x

old param generator:
def random_parameter2(repetitions, layer, qubits):
    """

    :param repetitions: number of parameter dependent gates
    :param layer: number of layer
    :param qubits: number of qubits
    :return: set of random weights
    """
    np_arr = 2 * np.pi * np.random.random(size=(repetitions, layer, qubits))
    return np_arr.flatten().tolist()

# def random_weights():
#     return 2 * np.pi * np.random.random(size=(2, n_ansatz_layers, n_qubits))



parameter_set = np.array(num_samples*[[[[+4329999.2948790318043715], [-50099999.487549821951812], [-900000.267787482006577]]]])

qm = qm(num_qubits, num_layer, parameter_set[0])
f_x = qm.predict_interval(simulator, shots, x, plot=False)

plot_fx_advanced(x, f_x)


########################################
########################################
OLD PULSE ANALYSIS
########################################
import math
import numpy as np

from src.pulse_gates import *
from utils.visualize import bloch_sphere

from scipy.optimize import minimize

current_state = PHASE_SHIFTED_STATE
samples = 100
sigma = 15
theta = jnp.pi/2

# for sigma = 15
RX = 0.04278068369641117
H = 0.042780849440995694       # does not work when init state is superposition
RZ = 0.4581489313344305
H2 = np.pi / (math.sqrt(2*np.pi) * sigma)
# good estimate for H is np.pi / (math.sqrt(2*np.pi) * sigma)

RX = np.linspace(0.042780631757944214, 0.042780641757944214, samples)

for _ in range(samples):
    ds, s, probs, ol, result = RX_pulse(theta, RX[_], sigma, current_state, plot_prob=False, plot_blochsphere=False)

    print(ds, "final:", result[-1].data, "|0>", probs[0], "---", "|1>", probs[1], "---", )
    # bloch_sphere.plot_bloch_sphere(result)
    # if ol > 0.99995:
    #     print("found")
        # bloch_sphere.plot_bloch_sphere(result)

# final_vector = Statevector([1.0 + 0.0j, 0.0 + 0.0j])
#
# def distance_to_target(rx):
#     """Calculates the Euclidean distance to the target state."""
#     ds, s, probs, ol, result = RX_pulse(theta, rx, sigma, current_state, plot_prob=False, plot_blochsphere=False)
#     return np.linalg.norm(result[-1].data - final_vector.data)
#
# initial_rx = RX

# USING BFGS
# result = minimize(distance_to_target, initial_rx, method='BFGS')
#
# best_rx = result.x[0]
# min_distance = result.fun
#
# print(f"Best RX: {best_rx}, Minimum Distance: {min_distance}")
# -> Scipy minimize found Best RX: 0.042780631757944214, Minimum Distance: 0.0006575298896276235


# Minimize the distance using Nelder-Mead
# result = minimize(distance_to_target, initial_rx, method='Nelder-Mead')
#
# best_rx = result.x[0]
# min_distance = result.fun
#
# print(f"Best RX: {best_rx}, Minimum Distance: {min_distance}")
# -> Best RX: 0.04278068369641117, Minimum Distance: 0.0006575304094206627




########################################
########################################
pulse level original drivestrength for pi/2
RX = 0.042780631757944214
H = 0.042780849440995694
RZ = 0.4581489313344305


# def calculate_envelope_integral(duration, _dt, sigma):
#     """
#     Calculate the integral of the gaussian envelope from 0 to duration*_dt.
#     """
#     t_span = np.linspace(0, duration * _dt, duration + 1)
#     center = duration * _dt / 2
#
#     def gaussian_envelope(t):
#         return np.exp(-((t - center) ** 2) / (2 * sigma ** 2))
#
#     integral, _ = quad(gaussian_envelope, t_span[0], t_span[-1])
#     return integral
#
# def estimate_rx_drive_strength(theta, sigma, k, duration=120, _dt=0.1):
#     """
#     Estimate drive_strength for RX gate based on rotation angle theta.
#     """
#
#     integral = calculate_envelope_integral(duration, _dt, sigma)
#     drive_strength = (theta + 2 * np.pi * k) / (2 * integral)
#     return drive_strength



Working only for np.pi/2
def RX_pulse(theta, drive_strength, sigma, current_state, plot_prob=False, plot_blochsphere=False):
    omega = 5.0
    duration = 120
    phase = 0
    expected_state = np.array([np.cos(theta / 2), -1j * np.sin(theta / 2)])
    k = -0.179 #= -0.0908450021334925
    drive_strength = estimate_rx_drive_strength(theta, sigma, k, duration)
    # print("Drive strength: ", drive_strength)
    return pulse(drive_strength=drive_strength, sigma=sigma, duration=duration, omega=omega, phase=phase, expected_state=expected_state,
                 current_state=current_state,
                 plot=plot_prob, bool_blochsphere=plot_blochsphere)





k = 5.524648297886591
drivestrength_RZ = (theta/2 - 5.0/2 * 12 + 2 * np.pi * k) / 12
print(drivestrength_RZ)

def RZ_pulse(theta, drive_strength, sigma, current_state, plot_prob=False, plot_blochsphere=False):
    omega = 5.0
    duration = int(theta / (omega * 0.1))
    if duration < 1:
        duration = 1
    phase = np.pi
    expected_state = np.array([np.exp(-1j * theta / 2), 0])
    return pulse(drive_strength=drive_strength, sigma=sigma, duration=duration, omega=omega, phase=phase, expected_state=expected_state,
                 current_state=current_state,
                 plot=plot_prob, bool_blochsphere=plot_blochsphere)


#####################################

ds, s, probs, ol, result = RX_pulse(RX, sigma, current_state, plot_prob=False, plot_blochsphere=False)
    print("|0>", probs[0], "---", "|1>", probs[1], "---", ds, s, "final:", result[-1].data)

ds, s, probs, ol, result = RZ_pulse(RZ, sigma, current_state, plot_prob=False, plot_blochsphere=False)
    print("|0>", probs[0], "---", "|1>", probs[1], "---", ds, s, "final:", result[-1].data)



#####################################
drive_strength_samples = np.linspace(0, 0.02277960635661175, samples)
sigma_samples = np.linspace(15, 15, samples)
def h_pulse(drive_strength, sigma, plot, bool_blochsphere=False):
    expected_state = np.array([1, 1]) / np.sqrt(2)
    phase = np.pi / 2

    omega = 5.0                         # v
    drive_strength = drive_strength     # r
    sigma = sigma                       # sigma

    final_probs = np.zeros(2)

    H_static = static_hamiltonian(omega=omega)
    H_drive = drive_hamiltonian(drive_strength=drive_strength)

    ham_solver = Solver(
        static_hamiltonian=H_static,
        hamiltonian_operators=[H_drive],
        rotating_frame=H_static
    )

    duration = 120  # Number of time steps (samples)
    amp = 1.0      # Amplitude, height gaussian bell at peak, default Max
    _dt = 0.1       # Time step in ns
    t_span = np.linspace(0, duration * _dt, duration + 1)   # Tells solver when to check the qubits state

    def gaussian_envelope(t):
        center = duration * _dt / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,
        phase=phase
    )
    result = ham_solver.solve(
        t_span=t_span,
        y0=INIT_STATE,
        method='jax_odeint',
        signals=[gaussian_signal]
    )
    state_probs = prob(result.y)
    final_state = result.y[-1]
    overlap = np.abs(np.vdot(expected_state, final_state)) ** 2

    final_probs[0] = state_probs[-1, 0]
    final_probs[1] = state_probs[-1, 1]

    if plot:
        plot_probabilities(t_span, state_probs)
    if bool_blochsphere:
        plot_bloch_sphere(result.y)

    return drive_strength, sigma, final_probs, overlap, result.y


def RX_pulse(drive_strength, sigma, theta, plot=False, bool_blochsphere=False):
    final_probs = np.zeros(2)
    omega = 5.0
    H_static = static_hamiltonian(omega=omega)
    H_drive = drive_hamiltonian(drive_strength=drive_strength)
    ham_solver = Solver(
        static_hamiltonian=H_static,
        hamiltonian_operators=[H_drive],
        rotating_frame=H_static
    )
    duration = 120
    amp = 1.0
    _dt = 0.1
    t_span = np.linspace(0, duration * _dt, duration + 1)

    def gaussian_envelope(t):
        center = duration * _dt / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))
    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,
        phase=0  # Set to 0 for X-axis rotation
    )
    result = ham_solver.solve(
        t_span=t_span,
        y0=INIT_STATE,
        method='jax_odeint',
        signals=[gaussian_signal]
    )

    if plot:
        state_probs = np.abs(result.y) ** 2
        plt.figure(figsize=(10, 6))
        plt.plot(t_span, state_probs[:, 0], label="P(|0>)")
        plt.plot(t_span, state_probs[:, 1], label="P(|1>)")
        plt.xlabel("Time (ns)")
        plt.ylabel("Probability")
        plt.title("Qubit State Evolution Under Gaussian Pulse for RX gate")
        plt.legend()
        plt.grid()
        plt.show()
    if bool_blochsphere:
        plot_bloch_sphere(result.y)
    expected_state = np.array([np.cos(theta/2), -1j * np.sin(theta/2)])
    final_state = result.y[-1]
    overlap = np.abs(np.vdot(expected_state, final_state)) ** 2
    state_probs = np.abs(result.y) ** 2
    final_probs[0] = state_probs[-1, 0]
    final_probs[1] = state_probs[-1, 1]
    return drive_strength, sigma, final_probs, overlap, result.y


def RZ_pulse(drive_strength, sigma, theta, plot=False, bool_blochsphere=False):
    final_probs = np.zeros(2)
    omega = 5.0
    H_static = static_hamiltonian(omega=omega)
    H_drive = drive_hamiltonian(drive_strength=drive_strength)
    ham_solver = Solver(
        static_hamiltonian=H_static,
        hamiltonian_operators=[H_drive],
        rotating_frame=H_static
    )
    duration = int(theta / (omega * 0.1))  # Adjust duration for theta, assuming _dt=0.1
    if duration < 1:
        duration = 1
    amp = 1.0
    _dt = 0.1
    t_span = np.linspace(0, duration * _dt, duration + 1)

    def gaussian_envelope(t):
        center = duration * _dt / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))
    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,
        phase=0  # Set to 0 for Z-axis alignment
    )
    result = ham_solver.solve(
        t_span=t_span,
        y0=INIT_STATE,
        method='jax_odeint',
        signals=[gaussian_signal]
    )
    if plot:
        state_probs = np.abs(result.y) ** 2
        plt.figure(figsize=(10, 6))
        plt.plot(t_span, state_probs[:, 0], label="P(|0>)")
        plt.plot(t_span, state_probs[:, 1], label="P(|1>)")
        plt.xlabel("Time (ns)")
        plt.ylabel("Probability")
        plt.title("Qubit State Evolution Under Gaussian Pulse for RZ gate")
        plt.legend()
        plt.grid()
        plt.show()
    if bool_blochsphere:
        plot_bloch_sphere(result.y)
    expected_state = np.array([np.exp(-1j*theta/2), 0])  # For |0> initially
    final_state = result.y[-1]
    overlap = np.abs(np.vdot(expected_state, final_state)) ** 2
    state_probs = np.abs(result.y) ** 2
    final_probs[0] = state_probs[-1, 0]
    final_probs[1] = state_probs[-1, 1]
    return drive_strength, sigma, final_probs, overlap, result.y


def estimate_period_zero_crossing(x, f_x):
    zero_crossings = np.where(np.diff(np.sign(f_x)))[0]
    if len(zero_crossings) > 1:
        T_est = np.mean(np.diff(x[zero_crossings])) * 2  # Assuming half-period per crossing
        return T_est
    else:
        return None

def estimate_period(x, f_x):
    peaks, _ = find_peaks(f_x)  # Find local maxima
    if len(peaks) > 1:
        T_est = np.mean(np.diff(x[peaks]))  # Average distance between peaks
        return T_est
    else:
        return None