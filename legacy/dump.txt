
C:\pythonProject\fourier-pulse-qc\.venv\Scripts\python.exe C:\pythonProject\fourier-pulse-qc\src\pennylane_models.py
-3.141592653589793 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266))]
-1.5707963267948966 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266)), (-1.5707963267948966, np.float64(0.04208416833667334)), (-1.5707963267948966, np.float64(0.20841683366733466)), (-1.5707963267948966, np.float64(0.374749498997996)), (-1.5707963267948966, np.float64(0.5410821643286573)), (-1.5707963267948966, np.float64(0.7074148296593186)), (-1.5707963267948966, np.float64(0.8757515030060119))]
-0.7853981633974483 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266)), (-1.5707963267948966, np.float64(0.04208416833667334)), (-1.5707963267948966, np.float64(0.20841683366733466)), (-1.5707963267948966, np.float64(0.374749498997996)), (-1.5707963267948966, np.float64(0.5410821643286573)), (-1.5707963267948966, np.float64(0.7074148296593186)), (-1.5707963267948966, np.float64(0.8757515030060119)), (-0.7853981633974483, np.float64(0.04208416833667334)), (-0.7853981633974483, np.float64(0.374749498997996)), (-0.7853981633974483, np.float64(0.7074148296593186)), (-0.7853981633974483, np.float64(0.7094188376753506))]
0 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266)), (-1.5707963267948966, np.float64(0.04208416833667334)), (-1.5707963267948966, np.float64(0.20841683366733466)), (-1.5707963267948966, np.float64(0.374749498997996)), (-1.5707963267948966, np.float64(0.5410821643286573)), (-1.5707963267948966, np.float64(0.7074148296593186)), (-1.5707963267948966, np.float64(0.8757515030060119)), (-0.7853981633974483, np.float64(0.04208416833667334)), (-0.7853981633974483, np.float64(0.374749498997996)), (-0.7853981633974483, np.float64(0.7074148296593186)), (-0.7853981633974483, np.float64(0.7094188376753506)), (0, np.float64(0.0)), (0, np.float64(0.002004008016032064)), (0, np.float64(0.004008016032064128)), (0, np.float64(0.0060120240480961915)), (0, np.float64(0.008016032064128256)), (0, np.float64(0.01002004008016032)), (0, np.float64(0.012024048096192383)), (0, np.float64(0.014028056112224447)), (0, np.float64(0.01603206412825651)), (0, np.float64(0.018036072144288574)), (0, np.float64(0.02004008016032064)), (0, np.float64(0.022044088176352703)), (0, np.float64(0.024048096192384766)), (0, np.float64(0.026052104208416832)), (0, np.float64(0.028056112224448895)), (0, np.float64(0.03006012024048096)), (0, np.float64(0.03206412825651302)), (0, np.float64(0.03406813627254509)), (0, np.float64(0.03607214428857715)), (0, np.float64(0.038076152304609215)), (0, np.float64(0.04008016032064128)), (0, np.float64(0.04208416833667334)), (0, np.float64(0.044088176352705406)), (0, np.float64(0.04609218436873747)), (0, np.float64(0.04809619238476953)), (0, np.float64(0.0501002004008016)), (0, np.float64(0.052104208416833664)), (0, np.float64(0.05410821643286573)), (0, np.float64(0.05611222444889779)), (0, np.float64(0.058116232464929855)), (0, np.float64(0.06012024048096192)), (0, np.float64(0.06212424849699398)), (0, np.float64(0.06412825651302605)), (0, np.float64(0.06613226452905811)), (0, np.float64(0.06813627254509018)), (0, np.float64(0.07014028056112225)), (0, np.float64(0.0721442885771543)), (0, np.float64(0.07414829659318636)), (0, np.float64(0.07615230460921843)), (0, np.float64(0.0781563126252505)), (0, np.float64(0.08016032064128256)), (0, np.float64(0.08216432865731463)), (0, np.float64(0.08416833667334668)), (0, np.float64(0.08617234468937875)), (0, np.float64(0.08817635270541081)), (0, np.float64(0.09018036072144288)), (0, np.float64(0.09218436873747494)), (0, np.float64(0.09418837675350701)), (0, np.float64(0.09619238476953906)), (0, np.float64(0.09819639278557113)), (0, np.float64(0.1002004008016032)), (0, np.float64(0.10220440881763526)), (0, np.float64(0.10420841683366733)), (0, np.float64(0.1062124248496994)), (0, np.float64(0.10821643286573146)), (0, np.float64(0.11022044088176351)), (0, np.float64(0.11222444889779558)), (0, np.float64(0.11422845691382764)), (0, np.float64(0.11623246492985971)), (0, np.float64(0.11823647294589178)), (0, np.float64(0.12024048096192384)), (0, np.float64(0.1222444889779559)), (0, np.float64(0.12424849699398796)), (0, np.float64(0.12625250501002003)), (0, np.float64(0.1282565130260521)), (0, np.float64(0.13026052104208416)), (0, np.float64(0.13226452905811623)), (0, np.float64(0.1342685370741483)), (0, np.float64(0.13627254509018036)), (0, np.float64(0.13827655310621242)), (0, np.float64(0.1402805611222445)), (0, np.float64(0.14228456913827653)), (0, np.float64(0.1442885771543086)), (0, np.float64(0.14629258517034066)), (0, np.float64(0.14829659318637273)), (0, np.float64(0.1503006012024048)), (0, np.float64(0.15230460921843686)), (0, np.float64(0.15430861723446893)), (0, np.float64(0.156312625250501)), (0, np.float64(0.15831663326653306)), (0, np.float64(0.16032064128256512)), (0, np.float64(0.1623246492985972)), (0, np.float64(0.16432865731462926)), (0, np.float64(0.16633266533066132)), (0, np.float64(0.16833667334669336)), (0, np.float64(0.17034068136272543)), (0, np.float64(0.1723446893787575)), (0, np.float64(0.17434869739478956)), (0, np.float64(0.17635270541082163)), (0, np.float64(0.1783567134268537)), (0, np.float64(0.18036072144288576)), (0, np.float64(0.18236472945891782)), (0, np.float64(0.1843687374749499)), (0, np.float64(0.18637274549098196)), (0, np.float64(0.18837675350701402)), (0, np.float64(0.1903807615230461)), (0, np.float64(0.19238476953907813)), (0, np.float64(0.1943887775551102)), (0, np.float64(0.19639278557114226)), (0, np.float64(0.19839679358717432)), (0, np.float64(0.2004008016032064)), (0, np.float64(0.20240480961923846)), (0, np.float64(0.20440881763527052)), (0, np.float64(0.2064128256513026)), (0, np.float64(0.20841683366733466)), (0, np.float64(0.21042084168336672)), (0, np.float64(0.2124248496993988)), (0, np.float64(0.21442885771543085)), (0, np.float64(0.21643286573146292)), (0, np.float64(0.21843687374749496)), (0, np.float64(0.22044088176352702)), (0, np.float64(0.2224448897795591)), (0, np.float64(0.22444889779559116)), (0, np.float64(0.22645290581162322)), (0, np.float64(0.2284569138276553)), (0, np.float64(0.23046092184368736)), (0, np.float64(0.23246492985971942)), (0, np.float64(0.2344689378757515)), (0, np.float64(0.23647294589178355)), (0, np.float64(0.23847695390781562)), (0, np.float64(0.24048096192384769)), (0, np.float64(0.24248496993987975)), (0, np.float64(0.2444889779559118)), (0, np.float64(0.24649298597194386)), (0, np.float64(0.24849699398797592)), (0, np.float64(0.250501002004008)), (0, np.float64(0.25250501002004005)), (0, np.float64(0.2545090180360721)), (0, np.float64(0.2565130260521042)), (0, np.float64(0.25851703406813625)), (0, np.float64(0.2605210420841683)), (0, np.float64(0.2625250501002004)), (0, np.float64(0.26452905811623245)), (0, np.float64(0.2665330661322645)), (0, np.float64(0.2685370741482966)), (0, np.float64(0.27054108216432865)), (0, np.float64(0.2725450901803607)), (0, np.float64(0.2745490981963928)), (0, np.float64(0.27655310621242485)), (0, np.float64(0.2785571142284569)), (0, np.float64(0.280561122244489)), (0, np.float64(0.282565130260521)), (0, np.float64(0.28456913827655306)), (0, np.float64(0.2865731462925851)), (0, np.float64(0.2885771543086172)), (0, np.float64(0.29058116232464926)), (0, np.float64(0.2925851703406813)), (0, np.float64(0.2945891783567134)), (0, np.float64(0.29659318637274545)), (0, np.float64(0.2985971943887775)), (0, np.float64(0.3006012024048096)), (0, np.float64(0.30260521042084165)), (0, np.float64(0.3046092184368737)), (0, np.float64(0.3066132264529058)), (0, np.float64(0.30861723446893785)), (0, np.float64(0.3106212424849699)), (0, np.float64(0.312625250501002)), (0, np.float64(0.31462925851703405)), (0, np.float64(0.3166332665330661)), (0, np.float64(0.3186372745490982)), (0, np.float64(0.32064128256513025)), (0, np.float64(0.3226452905811623)), (0, np.float64(0.3246492985971944)), (0, np.float64(0.32665330661322645)), (0, np.float64(0.3286573146292585)), (0, np.float64(0.3306613226452906)), (0, np.float64(0.33266533066132264)), (0, np.float64(0.33466933867735466)), (0, np.float64(0.3366733466933867)), (0, np.float64(0.3386773547094188)), (0, np.float64(0.34068136272545085)), (0, np.float64(0.3426853707414829)), (0, np.float64(0.344689378757515)), (0, np.float64(0.34669338677354705)), (0, np.float64(0.3486973947895791)), (0, np.float64(0.3507014028056112)), (0, np.float64(0.35270541082164325)), (0, np.float64(0.3547094188376753)), (0, np.float64(0.3567134268537074)), (0, np.float64(0.35871743486973945)), (0, np.float64(0.3607214428857715)), (0, np.float64(0.3627254509018036)), (0, np.float64(0.36472945891783565)), (0, np.float64(0.3667334669338677)), (0, np.float64(0.3687374749498998)), (0, np.float64(0.37074148296593185)), (0, np.float64(0.3727454909819639)), (0, np.float64(0.374749498997996)), (0, np.float64(0.37675350701402804)), (0, np.float64(0.3787575150300601)), (0, np.float64(0.3807615230460922)), (0, np.float64(0.38276553106212424)), (0, np.float64(0.38476953907815625)), (0, np.float64(0.3867735470941883)), (0, np.float64(0.3887775551102204)), (0, np.float64(0.39078156312625245)), (0, np.float64(0.3927855711422845)), (0, np.float64(0.3947895791583166)), (0, np.float64(0.39679358717434865)), (0, np.float64(0.3987975951903807)), (0, np.float64(0.4008016032064128)), (0, np.float64(0.40280561122244485)), (0, np.float64(0.4048096192384769)), (0, np.float64(0.406813627254509)), (0, np.float64(0.40881763527054105)), (0, np.float64(0.4108216432865731)), (0, np.float64(0.4128256513026052)), (0, np.float64(0.41482965931863724)), (0, np.float64(0.4168336673346693)), (0, np.float64(0.4188376753507014)), (0, np.float64(0.42084168336673344)), (0, np.float64(0.4228456913827655)), (0, np.float64(0.4248496993987976)), (0, np.float64(0.42685370741482964)), (0, np.float64(0.4288577154308617)), (0, np.float64(0.4308617234468938)), (0, np.float64(0.43286573146292584)), (0, np.float64(0.4348697394789579)), (0, np.float64(0.4368737474949899)), (0, np.float64(0.438877755511022)), (0, np.float64(0.44088176352705405)), (0, np.float64(0.4428857715430861)), (0, np.float64(0.4448897795591182)), (0, np.float64(0.44689378757515025)), (0, np.float64(0.4488977955911823)), (0, np.float64(0.4509018036072144)), (0, np.float64(0.45290581162324645)), (0, np.float64(0.4549098196392785)), (0, np.float64(0.4569138276553106)), (0, np.float64(0.45891783567134264)), (0, np.float64(0.4609218436873747)), (0, np.float64(0.4629258517034068)), (0, np.float64(0.46492985971943884)), (0, np.float64(0.4669338677354709)), (0, np.float64(0.468937875751503)), (0, np.float64(0.47094188376753504)), (0, np.float64(0.4729458917835671)), (0, np.float64(0.4749498997995992)), (0, np.float64(0.47695390781563124)), (0, np.float64(0.4789579158316633)), (0, np.float64(0.48096192384769537)), (0, np.float64(0.48296593186372744)), (0, np.float64(0.4849699398797595)), (0, np.float64(0.48697394789579157)), (0, np.float64(0.4889779559118236)), (0, np.float64(0.49098196392785565)), (0, np.float64(0.4929859719438877)), (0, np.float64(0.4949899799599198)), (0, np.float64(0.49699398797595185)), (0, np.float64(0.4989979959919839)), (0, np.float64(0.501002004008016)), (0, np.float64(0.503006012024048)), (0, np.float64(0.5050100200400801)), (0, np.float64(0.5070140280561122)), (0, np.float64(0.5090180360721442)), (0, np.float64(0.5110220440881763)), (0, np.float64(0.5130260521042084)), (0, np.float64(0.5150300601202404)), (0, np.float64(0.5170340681362725)), (0, np.float64(0.5190380761523046)), (0, np.float64(0.5210420841683366)), (0, np.float64(0.5230460921843687)), (0, np.float64(0.5250501002004008)), (0, np.float64(0.5270541082164328)), (0, np.float64(0.5290581162324649)), (0, np.float64(0.531062124248497)), (0, np.float64(0.533066132264529)), (0, np.float64(0.5350701402805611)), (0, np.float64(0.5370741482965932)), (0, np.float64(0.5390781563126252)), (0, np.float64(0.5410821643286573)), (0, np.float64(0.5430861723446894)), (0, np.float64(0.5450901803607214)), (0, np.float64(0.5470941883767535)), (0, np.float64(0.5490981963927856)), (0, np.float64(0.5511022044088176)), (0, np.float64(0.5531062124248497)), (0, np.float64(0.5551102204408818)), (0, np.float64(0.5571142284569138)), (0, np.float64(0.5591182364729459)), (0, np.float64(0.561122244488978)), (0, np.float64(0.56312625250501)), (0, np.float64(0.565130260521042)), (0, np.float64(0.567134268537074)), (0, np.float64(0.5691382765531061)), (0, np.float64(0.5711422845691382)), (0, np.float64(0.5731462925851702)), (0, np.float64(0.5751503006012023)), (0, np.float64(0.5771543086172344)), (0, np.float64(0.5791583166332664)), (0, np.float64(0.5811623246492985)), (0, np.float64(0.5831663326653306)), (0, np.float64(0.5851703406813626)), (0, np.float64(0.5871743486973947)), (0, np.float64(0.5891783567134268)), (0, np.float64(0.5911823647294588)), (0, np.float64(0.5931863727454909)), (0, np.float64(0.595190380761523)), (0, np.float64(0.597194388777555)), (0, np.float64(0.5991983967935871)), (0, np.float64(0.6012024048096192)), (0, np.float64(0.6032064128256512)), (0, np.float64(0.6052104208416833)), (0, np.float64(0.6072144288577154)), (0, np.float64(0.6092184368737474)), (0, np.float64(0.6112224448897795)), (0, np.float64(0.6132264529058116)), (0, np.float64(0.6152304609218436)), (0, np.float64(0.6172344689378757)), (0, np.float64(0.6192384769539078)), (0, np.float64(0.6212424849699398)), (0, np.float64(0.6232464929859719)), (0, np.float64(0.625250501002004)), (0, np.float64(0.627254509018036)), (0, np.float64(0.6292585170340681)), (0, np.float64(0.6312625250501002)), (0, np.float64(0.6332665330661322)), (0, np.float64(0.6352705410821643)), (0, np.float64(0.6372745490981964)), (0, np.float64(0.6392785571142284)), (0, np.float64(0.6412825651302605)), (0, np.float64(0.6432865731462926)), (0, np.float64(0.6452905811623246)), (0, np.float64(0.6472945891783567)), (0, np.float64(0.6492985971943888)), (0, np.float64(0.6513026052104208)), (0, np.float64(0.6533066132264529)), (0, np.float64(0.655310621242485)), (0, np.float64(0.657314629258517)), (0, np.float64(0.6593186372745491)), (0, np.float64(0.6613226452905812)), (0, np.float64(0.6633266533066132)), (0, np.float64(0.6653306613226453)), (0, np.float64(0.6673346693386772)), (0, np.float64(0.6693386773547093)), (0, np.float64(0.6713426853707414)), (0, np.float64(0.6733466933867734)), (0, np.float64(0.6753507014028055)), (0, np.float64(0.6773547094188376)), (0, np.float64(0.6793587174348696)), (0, np.float64(0.6813627254509017)), (0, np.float64(0.6833667334669338)), (0, np.float64(0.6853707414829658)), (0, np.float64(0.6873747494989979)), (0, np.float64(0.68937875751503)), (0, np.float64(0.691382765531062)), (0, np.float64(0.6933867735470941)), (0, np.float64(0.6953907815631262)), (0, np.float64(0.6973947895791582)), (0, np.float64(0.6993987975951903)), (0, np.float64(0.7014028056112224)), (0, np.float64(0.7034068136272544)), (0, np.float64(0.7054108216432865)), (0, np.float64(0.7074148296593186)), (0, np.float64(0.7094188376753506)), (0, np.float64(0.7114228456913827)), (0, np.float64(0.7134268537074148)), (0, np.float64(0.7154308617234468)), (0, np.float64(0.7174348697394789)), (0, np.float64(0.719438877755511)), (0, np.float64(0.721442885771543)), (0, np.float64(0.7234468937875751)), (0, np.float64(0.7254509018036072)), (0, np.float64(0.7274549098196392)), (0, np.float64(0.7294589178356713)), (0, np.float64(0.7314629258517034)), (0, np.float64(0.7334669338677354)), (0, np.float64(0.7354709418837675)), (0, np.float64(0.7374749498997996)), (0, np.float64(0.7394789579158316)), (0, np.float64(0.7414829659318637)), (0, np.float64(0.7434869739478958)), (0, np.float64(0.7454909819639278)), (0, np.float64(0.7474949899799599)), (0, np.float64(0.749498997995992)), (0, np.float64(0.751503006012024)), (0, np.float64(0.7535070140280561)), (0, np.float64(0.7555110220440882)), (0, np.float64(0.7575150300601202)), (0, np.float64(0.7595190380761523)), (0, np.float64(0.7615230460921844)), (0, np.float64(0.7635270541082164)), (0, np.float64(0.7655310621242485)), (0, np.float64(0.7675350701402806)), (0, np.float64(0.7695390781563125)), (0, np.float64(0.7715430861723446)), (0, np.float64(0.7735470941883766)), (0, np.float64(0.7755511022044087)), (0, np.float64(0.7775551102204408)), (0, np.float64(0.7795591182364728)), (0, np.float64(0.7815631262525049)), (0, np.float64(0.783567134268537)), (0, np.float64(0.785571142284569)), (0, np.float64(0.7875751503006011)), (0, np.float64(0.7895791583166332)), (0, np.float64(0.7915831663326652)), (0, np.float64(0.7935871743486973)), (0, np.float64(0.7955911823647294)), (0, np.float64(0.7975951903807614)), (0, np.float64(0.7995991983967935)), (0, np.float64(0.8016032064128256)), (0, np.float64(0.8036072144288576)), (0, np.float64(0.8056112224448897)), (0, np.float64(0.8076152304609218)), (0, np.float64(0.8096192384769538)), (0, np.float64(0.8116232464929859)), (0, np.float64(0.813627254509018)), (0, np.float64(0.81563126252505)), (0, np.float64(0.8176352705410821)), (0, np.float64(0.8196392785571142)), (0, np.float64(0.8216432865731462)), (0, np.float64(0.8236472945891783)), (0, np.float64(0.8256513026052104)), (0, np.float64(0.8276553106212424)), (0, np.float64(0.8296593186372745)), (0, np.float64(0.8316633266533066)), (0, np.float64(0.8336673346693386)), (0, np.float64(0.8356713426853707)), (0, np.float64(0.8376753507014028)), (0, np.float64(0.8396793587174348)), (0, np.float64(0.8416833667334669)), (0, np.float64(0.843687374749499)), (0, np.float64(0.845691382765531)), (0, np.float64(0.8476953907815631)), (0, np.float64(0.8496993987975952)), (0, np.float64(0.8517034068136272)), (0, np.float64(0.8537074148296593)), (0, np.float64(0.8557114228456913)), (0, np.float64(0.8577154308617234)), (0, np.float64(0.8597194388777555)), (0, np.float64(0.8617234468937875)), (0, np.float64(0.8637274549098196)), (0, np.float64(0.8657314629258517)), (0, np.float64(0.8677354709418837)), (0, np.float64(0.8697394789579158)), (0, np.float64(0.8717434869739479)), (0, np.float64(0.8737474949899798)), (0, np.float64(0.8757515030060119)), (0, np.float64(0.877755511022044)), (0, np.float64(0.879759519038076)), (0, np.float64(0.8817635270541081)), (0, np.float64(0.8837675350701402)), (0, np.float64(0.8857715430861722)), (0, np.float64(0.8877755511022043)), (0, np.float64(0.8897795591182364)), (0, np.float64(0.8917835671342684)), (0, np.float64(0.8937875751503005)), (0, np.float64(0.8957915831663326)), (0, np.float64(0.8977955911823646)), (0, np.float64(0.8997995991983967)), (0, np.float64(0.9018036072144288)), (0, np.float64(0.9038076152304608)), (0, np.float64(0.9058116232464929)), (0, np.float64(0.907815631262525)), (0, np.float64(0.909819639278557)), (0, np.float64(0.9118236472945891)), (0, np.float64(0.9138276553106212)), (0, np.float64(0.9158316633266532)), (0, np.float64(0.9178356713426853)), (0, np.float64(0.9198396793587174)), (0, np.float64(0.9218436873747494)), (0, np.float64(0.9238476953907815)), (0, np.float64(0.9258517034068136)), (0, np.float64(0.9278557114228456)), (0, np.float64(0.9298597194388777)), (0, np.float64(0.9318637274549098)), (0, np.float64(0.9338677354709418)), (0, np.float64(0.9358717434869739)), (0, np.float64(0.937875751503006)), (0, np.float64(0.939879759519038)), (0, np.float64(0.9418837675350701)), (0, np.float64(0.9438877755511021)), (0, np.float64(0.9458917835671342)), (0, np.float64(0.9478957915831663)), (0, np.float64(0.9498997995991983)), (0, np.float64(0.9519038076152304)), (0, np.float64(0.9539078156312625)), (0, np.float64(0.9559118236472945)), (0, np.float64(0.9579158316633266)), (0, np.float64(0.9599198396793587)), (0, np.float64(0.9619238476953907)), (0, np.float64(0.9639278557114228)), (0, np.float64(0.9659318637274549)), (0, np.float64(0.9679358717434869)), (0, np.float64(0.969939879759519)), (0, np.float64(0.9719438877755511)), (0, np.float64(0.9739478957915831)), (0, np.float64(0.9759519038076151)), (0, np.float64(0.9779559118236472)), (0, np.float64(0.9799599198396792)), (0, np.float64(0.9819639278557113)), (0, np.float64(0.9839679358717434)), (0, np.float64(0.9859719438877754)), (0, np.float64(0.9879759519038075)), (0, np.float64(0.9899799599198396)), (0, np.float64(0.9919839679358716)), (0, np.float64(0.9939879759519037)), (0, np.float64(0.9959919839679358)), (0, np.float64(0.9979959919839678)), (0, np.float64(1.0))]
0.7853981633974483 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266)), (-1.5707963267948966, np.float64(0.04208416833667334)), (-1.5707963267948966, np.float64(0.20841683366733466)), (-1.5707963267948966, np.float64(0.374749498997996)), (-1.5707963267948966, np.float64(0.5410821643286573)), (-1.5707963267948966, np.float64(0.7074148296593186)), (-1.5707963267948966, np.float64(0.8757515030060119)), (-0.7853981633974483, np.float64(0.04208416833667334)), (-0.7853981633974483, np.float64(0.374749498997996)), (-0.7853981633974483, np.float64(0.7074148296593186)), (-0.7853981633974483, np.float64(0.7094188376753506)), (0, np.float64(0.0)), (0, np.float64(0.002004008016032064)), (0, np.float64(0.004008016032064128)), (0, np.float64(0.0060120240480961915)), (0, np.float64(0.008016032064128256)), (0, np.float64(0.01002004008016032)), (0, np.float64(0.012024048096192383)), (0, np.float64(0.014028056112224447)), (0, np.float64(0.01603206412825651)), (0, np.float64(0.018036072144288574)), (0, np.float64(0.02004008016032064)), (0, np.float64(0.022044088176352703)), (0, np.float64(0.024048096192384766)), (0, np.float64(0.026052104208416832)), (0, np.float64(0.028056112224448895)), (0, np.float64(0.03006012024048096)), (0, np.float64(0.03206412825651302)), (0, np.float64(0.03406813627254509)), (0, np.float64(0.03607214428857715)), (0, np.float64(0.038076152304609215)), (0, np.float64(0.04008016032064128)), (0, np.float64(0.04208416833667334)), (0, np.float64(0.044088176352705406)), (0, np.float64(0.04609218436873747)), (0, np.float64(0.04809619238476953)), (0, np.float64(0.0501002004008016)), (0, np.float64(0.052104208416833664)), (0, np.float64(0.05410821643286573)), (0, np.float64(0.05611222444889779)), (0, np.float64(0.058116232464929855)), (0, np.float64(0.06012024048096192)), (0, np.float64(0.06212424849699398)), (0, np.float64(0.06412825651302605)), (0, np.float64(0.06613226452905811)), (0, np.float64(0.06813627254509018)), (0, np.float64(0.07014028056112225)), (0, np.float64(0.0721442885771543)), (0, np.float64(0.07414829659318636)), (0, np.float64(0.07615230460921843)), (0, np.float64(0.0781563126252505)), (0, np.float64(0.08016032064128256)), (0, np.float64(0.08216432865731463)), (0, np.float64(0.08416833667334668)), (0, np.float64(0.08617234468937875)), (0, np.float64(0.08817635270541081)), (0, np.float64(0.09018036072144288)), (0, np.float64(0.09218436873747494)), (0, np.float64(0.09418837675350701)), (0, np.float64(0.09619238476953906)), (0, np.float64(0.09819639278557113)), (0, np.float64(0.1002004008016032)), (0, np.float64(0.10220440881763526)), (0, np.float64(0.10420841683366733)), (0, np.float64(0.1062124248496994)), (0, np.float64(0.10821643286573146)), (0, np.float64(0.11022044088176351)), (0, np.float64(0.11222444889779558)), (0, np.float64(0.11422845691382764)), (0, np.float64(0.11623246492985971)), (0, np.float64(0.11823647294589178)), (0, np.float64(0.12024048096192384)), (0, np.float64(0.1222444889779559)), (0, np.float64(0.12424849699398796)), (0, np.float64(0.12625250501002003)), (0, np.float64(0.1282565130260521)), (0, np.float64(0.13026052104208416)), (0, np.float64(0.13226452905811623)), (0, np.float64(0.1342685370741483)), (0, np.float64(0.13627254509018036)), (0, np.float64(0.13827655310621242)), (0, np.float64(0.1402805611222445)), (0, np.float64(0.14228456913827653)), (0, np.float64(0.1442885771543086)), (0, np.float64(0.14629258517034066)), (0, np.float64(0.14829659318637273)), (0, np.float64(0.1503006012024048)), (0, np.float64(0.15230460921843686)), (0, np.float64(0.15430861723446893)), (0, np.float64(0.156312625250501)), (0, np.float64(0.15831663326653306)), (0, np.float64(0.16032064128256512)), (0, np.float64(0.1623246492985972)), (0, np.float64(0.16432865731462926)), (0, np.float64(0.16633266533066132)), (0, np.float64(0.16833667334669336)), (0, np.float64(0.17034068136272543)), (0, np.float64(0.1723446893787575)), (0, np.float64(0.17434869739478956)), (0, np.float64(0.17635270541082163)), (0, np.float64(0.1783567134268537)), (0, np.float64(0.18036072144288576)), (0, np.float64(0.18236472945891782)), (0, np.float64(0.1843687374749499)), (0, np.float64(0.18637274549098196)), (0, np.float64(0.18837675350701402)), (0, np.float64(0.1903807615230461)), (0, np.float64(0.19238476953907813)), (0, np.float64(0.1943887775551102)), (0, np.float64(0.19639278557114226)), (0, np.float64(0.19839679358717432)), (0, np.float64(0.2004008016032064)), (0, np.float64(0.20240480961923846)), (0, np.float64(0.20440881763527052)), (0, np.float64(0.2064128256513026)), (0, np.float64(0.20841683366733466)), (0, np.float64(0.21042084168336672)), (0, np.float64(0.2124248496993988)), (0, np.float64(0.21442885771543085)), (0, np.float64(0.21643286573146292)), (0, np.float64(0.21843687374749496)), (0, np.float64(0.22044088176352702)), (0, np.float64(0.2224448897795591)), (0, np.float64(0.22444889779559116)), (0, np.float64(0.22645290581162322)), (0, np.float64(0.2284569138276553)), (0, np.float64(0.23046092184368736)), (0, np.float64(0.23246492985971942)), (0, np.float64(0.2344689378757515)), (0, np.float64(0.23647294589178355)), (0, np.float64(0.23847695390781562)), (0, np.float64(0.24048096192384769)), (0, np.float64(0.24248496993987975)), (0, np.float64(0.2444889779559118)), (0, np.float64(0.24649298597194386)), (0, np.float64(0.24849699398797592)), (0, np.float64(0.250501002004008)), (0, np.float64(0.25250501002004005)), (0, np.float64(0.2545090180360721)), (0, np.float64(0.2565130260521042)), (0, np.float64(0.25851703406813625)), (0, np.float64(0.2605210420841683)), (0, np.float64(0.2625250501002004)), (0, np.float64(0.26452905811623245)), (0, np.float64(0.2665330661322645)), (0, np.float64(0.2685370741482966)), (0, np.float64(0.27054108216432865)), (0, np.float64(0.2725450901803607)), (0, np.float64(0.2745490981963928)), (0, np.float64(0.27655310621242485)), (0, np.float64(0.2785571142284569)), (0, np.float64(0.280561122244489)), (0, np.float64(0.282565130260521)), (0, np.float64(0.28456913827655306)), (0, np.float64(0.2865731462925851)), (0, np.float64(0.2885771543086172)), (0, np.float64(0.29058116232464926)), (0, np.float64(0.2925851703406813)), (0, np.float64(0.2945891783567134)), (0, np.float64(0.29659318637274545)), (0, np.float64(0.2985971943887775)), (0, np.float64(0.3006012024048096)), (0, np.float64(0.30260521042084165)), (0, np.float64(0.3046092184368737)), (0, np.float64(0.3066132264529058)), (0, np.float64(0.30861723446893785)), (0, np.float64(0.3106212424849699)), (0, np.float64(0.312625250501002)), (0, np.float64(0.31462925851703405)), (0, np.float64(0.3166332665330661)), (0, np.float64(0.3186372745490982)), (0, np.float64(0.32064128256513025)), (0, np.float64(0.3226452905811623)), (0, np.float64(0.3246492985971944)), (0, np.float64(0.32665330661322645)), (0, np.float64(0.3286573146292585)), (0, np.float64(0.3306613226452906)), (0, np.float64(0.33266533066132264)), (0, np.float64(0.33466933867735466)), (0, np.float64(0.3366733466933867)), (0, np.float64(0.3386773547094188)), (0, np.float64(0.34068136272545085)), (0, np.float64(0.3426853707414829)), (0, np.float64(0.344689378757515)), (0, np.float64(0.34669338677354705)), (0, np.float64(0.3486973947895791)), (0, np.float64(0.3507014028056112)), (0, np.float64(0.35270541082164325)), (0, np.float64(0.3547094188376753)), (0, np.float64(0.3567134268537074)), (0, np.float64(0.35871743486973945)), (0, np.float64(0.3607214428857715)), (0, np.float64(0.3627254509018036)), (0, np.float64(0.36472945891783565)), (0, np.float64(0.3667334669338677)), (0, np.float64(0.3687374749498998)), (0, np.float64(0.37074148296593185)), (0, np.float64(0.3727454909819639)), (0, np.float64(0.374749498997996)), (0, np.float64(0.37675350701402804)), (0, np.float64(0.3787575150300601)), (0, np.float64(0.3807615230460922)), (0, np.float64(0.38276553106212424)), (0, np.float64(0.38476953907815625)), (0, np.float64(0.3867735470941883)), (0, np.float64(0.3887775551102204)), (0, np.float64(0.39078156312625245)), (0, np.float64(0.3927855711422845)), (0, np.float64(0.3947895791583166)), (0, np.float64(0.39679358717434865)), (0, np.float64(0.3987975951903807)), (0, np.float64(0.4008016032064128)), (0, np.float64(0.40280561122244485)), (0, np.float64(0.4048096192384769)), (0, np.float64(0.406813627254509)), (0, np.float64(0.40881763527054105)), (0, np.float64(0.4108216432865731)), (0, np.float64(0.4128256513026052)), (0, np.float64(0.41482965931863724)), (0, np.float64(0.4168336673346693)), (0, np.float64(0.4188376753507014)), (0, np.float64(0.42084168336673344)), (0, np.float64(0.4228456913827655)), (0, np.float64(0.4248496993987976)), (0, np.float64(0.42685370741482964)), (0, np.float64(0.4288577154308617)), (0, np.float64(0.4308617234468938)), (0, np.float64(0.43286573146292584)), (0, np.float64(0.4348697394789579)), (0, np.float64(0.4368737474949899)), (0, np.float64(0.438877755511022)), (0, np.float64(0.44088176352705405)), (0, np.float64(0.4428857715430861)), (0, np.float64(0.4448897795591182)), (0, np.float64(0.44689378757515025)), (0, np.float64(0.4488977955911823)), (0, np.float64(0.4509018036072144)), (0, np.float64(0.45290581162324645)), (0, np.float64(0.4549098196392785)), (0, np.float64(0.4569138276553106)), (0, np.float64(0.45891783567134264)), (0, np.float64(0.4609218436873747)), (0, np.float64(0.4629258517034068)), (0, np.float64(0.46492985971943884)), (0, np.float64(0.4669338677354709)), (0, np.float64(0.468937875751503)), (0, np.float64(0.47094188376753504)), (0, np.float64(0.4729458917835671)), (0, np.float64(0.4749498997995992)), (0, np.float64(0.47695390781563124)), (0, np.float64(0.4789579158316633)), (0, np.float64(0.48096192384769537)), (0, np.float64(0.48296593186372744)), (0, np.float64(0.4849699398797595)), (0, np.float64(0.48697394789579157)), (0, np.float64(0.4889779559118236)), (0, np.float64(0.49098196392785565)), (0, np.float64(0.4929859719438877)), (0, np.float64(0.4949899799599198)), (0, np.float64(0.49699398797595185)), (0, np.float64(0.4989979959919839)), (0, np.float64(0.501002004008016)), (0, np.float64(0.503006012024048)), (0, np.float64(0.5050100200400801)), (0, np.float64(0.5070140280561122)), (0, np.float64(0.5090180360721442)), (0, np.float64(0.5110220440881763)), (0, np.float64(0.5130260521042084)), (0, np.float64(0.5150300601202404)), (0, np.float64(0.5170340681362725)), (0, np.float64(0.5190380761523046)), (0, np.float64(0.5210420841683366)), (0, np.float64(0.5230460921843687)), (0, np.float64(0.5250501002004008)), (0, np.float64(0.5270541082164328)), (0, np.float64(0.5290581162324649)), (0, np.float64(0.531062124248497)), (0, np.float64(0.533066132264529)), (0, np.float64(0.5350701402805611)), (0, np.float64(0.5370741482965932)), (0, np.float64(0.5390781563126252)), (0, np.float64(0.5410821643286573)), (0, np.float64(0.5430861723446894)), (0, np.float64(0.5450901803607214)), (0, np.float64(0.5470941883767535)), (0, np.float64(0.5490981963927856)), (0, np.float64(0.5511022044088176)), (0, np.float64(0.5531062124248497)), (0, np.float64(0.5551102204408818)), (0, np.float64(0.5571142284569138)), (0, np.float64(0.5591182364729459)), (0, np.float64(0.561122244488978)), (0, np.float64(0.56312625250501)), (0, np.float64(0.565130260521042)), (0, np.float64(0.567134268537074)), (0, np.float64(0.5691382765531061)), (0, np.float64(0.5711422845691382)), (0, np.float64(0.5731462925851702)), (0, np.float64(0.5751503006012023)), (0, np.float64(0.5771543086172344)), (0, np.float64(0.5791583166332664)), (0, np.float64(0.5811623246492985)), (0, np.float64(0.5831663326653306)), (0, np.float64(0.5851703406813626)), (0, np.float64(0.5871743486973947)), (0, np.float64(0.5891783567134268)), (0, np.float64(0.5911823647294588)), (0, np.float64(0.5931863727454909)), (0, np.float64(0.595190380761523)), (0, np.float64(0.597194388777555)), (0, np.float64(0.5991983967935871)), (0, np.float64(0.6012024048096192)), (0, np.float64(0.6032064128256512)), (0, np.float64(0.6052104208416833)), (0, np.float64(0.6072144288577154)), (0, np.float64(0.6092184368737474)), (0, np.float64(0.6112224448897795)), (0, np.float64(0.6132264529058116)), (0, np.float64(0.6152304609218436)), (0, np.float64(0.6172344689378757)), (0, np.float64(0.6192384769539078)), (0, np.float64(0.6212424849699398)), (0, np.float64(0.6232464929859719)), (0, np.float64(0.625250501002004)), (0, np.float64(0.627254509018036)), (0, np.float64(0.6292585170340681)), (0, np.float64(0.6312625250501002)), (0, np.float64(0.6332665330661322)), (0, np.float64(0.6352705410821643)), (0, np.float64(0.6372745490981964)), (0, np.float64(0.6392785571142284)), (0, np.float64(0.6412825651302605)), (0, np.float64(0.6432865731462926)), (0, np.float64(0.6452905811623246)), (0, np.float64(0.6472945891783567)), (0, np.float64(0.6492985971943888)), (0, np.float64(0.6513026052104208)), (0, np.float64(0.6533066132264529)), (0, np.float64(0.655310621242485)), (0, np.float64(0.657314629258517)), (0, np.float64(0.6593186372745491)), (0, np.float64(0.6613226452905812)), (0, np.float64(0.6633266533066132)), (0, np.float64(0.6653306613226453)), (0, np.float64(0.6673346693386772)), (0, np.float64(0.6693386773547093)), (0, np.float64(0.6713426853707414)), (0, np.float64(0.6733466933867734)), (0, np.float64(0.6753507014028055)), (0, np.float64(0.6773547094188376)), (0, np.float64(0.6793587174348696)), (0, np.float64(0.6813627254509017)), (0, np.float64(0.6833667334669338)), (0, np.float64(0.6853707414829658)), (0, np.float64(0.6873747494989979)), (0, np.float64(0.68937875751503)), (0, np.float64(0.691382765531062)), (0, np.float64(0.6933867735470941)), (0, np.float64(0.6953907815631262)), (0, np.float64(0.6973947895791582)), (0, np.float64(0.6993987975951903)), (0, np.float64(0.7014028056112224)), (0, np.float64(0.7034068136272544)), (0, np.float64(0.7054108216432865)), (0, np.float64(0.7074148296593186)), (0, np.float64(0.7094188376753506)), (0, np.float64(0.7114228456913827)), (0, np.float64(0.7134268537074148)), (0, np.float64(0.7154308617234468)), (0, np.float64(0.7174348697394789)), (0, np.float64(0.719438877755511)), (0, np.float64(0.721442885771543)), (0, np.float64(0.7234468937875751)), (0, np.float64(0.7254509018036072)), (0, np.float64(0.7274549098196392)), (0, np.float64(0.7294589178356713)), (0, np.float64(0.7314629258517034)), (0, np.float64(0.7334669338677354)), (0, np.float64(0.7354709418837675)), (0, np.float64(0.7374749498997996)), (0, np.float64(0.7394789579158316)), (0, np.float64(0.7414829659318637)), (0, np.float64(0.7434869739478958)), (0, np.float64(0.7454909819639278)), (0, np.float64(0.7474949899799599)), (0, np.float64(0.749498997995992)), (0, np.float64(0.751503006012024)), (0, np.float64(0.7535070140280561)), (0, np.float64(0.7555110220440882)), (0, np.float64(0.7575150300601202)), (0, np.float64(0.7595190380761523)), (0, np.float64(0.7615230460921844)), (0, np.float64(0.7635270541082164)), (0, np.float64(0.7655310621242485)), (0, np.float64(0.7675350701402806)), (0, np.float64(0.7695390781563125)), (0, np.float64(0.7715430861723446)), (0, np.float64(0.7735470941883766)), (0, np.float64(0.7755511022044087)), (0, np.float64(0.7775551102204408)), (0, np.float64(0.7795591182364728)), (0, np.float64(0.7815631262525049)), (0, np.float64(0.783567134268537)), (0, np.float64(0.785571142284569)), (0, np.float64(0.7875751503006011)), (0, np.float64(0.7895791583166332)), (0, np.float64(0.7915831663326652)), (0, np.float64(0.7935871743486973)), (0, np.float64(0.7955911823647294)), (0, np.float64(0.7975951903807614)), (0, np.float64(0.7995991983967935)), (0, np.float64(0.8016032064128256)), (0, np.float64(0.8036072144288576)), (0, np.float64(0.8056112224448897)), (0, np.float64(0.8076152304609218)), (0, np.float64(0.8096192384769538)), (0, np.float64(0.8116232464929859)), (0, np.float64(0.813627254509018)), (0, np.float64(0.81563126252505)), (0, np.float64(0.8176352705410821)), (0, np.float64(0.8196392785571142)), (0, np.float64(0.8216432865731462)), (0, np.float64(0.8236472945891783)), (0, np.float64(0.8256513026052104)), (0, np.float64(0.8276553106212424)), (0, np.float64(0.8296593186372745)), (0, np.float64(0.8316633266533066)), (0, np.float64(0.8336673346693386)), (0, np.float64(0.8356713426853707)), (0, np.float64(0.8376753507014028)), (0, np.float64(0.8396793587174348)), (0, np.float64(0.8416833667334669)), (0, np.float64(0.843687374749499)), (0, np.float64(0.845691382765531)), (0, np.float64(0.8476953907815631)), (0, np.float64(0.8496993987975952)), (0, np.float64(0.8517034068136272)), (0, np.float64(0.8537074148296593)), (0, np.float64(0.8557114228456913)), (0, np.float64(0.8577154308617234)), (0, np.float64(0.8597194388777555)), (0, np.float64(0.8617234468937875)), (0, np.float64(0.8637274549098196)), (0, np.float64(0.8657314629258517)), (0, np.float64(0.8677354709418837)), (0, np.float64(0.8697394789579158)), (0, np.float64(0.8717434869739479)), (0, np.float64(0.8737474949899798)), (0, np.float64(0.8757515030060119)), (0, np.float64(0.877755511022044)), (0, np.float64(0.879759519038076)), (0, np.float64(0.8817635270541081)), (0, np.float64(0.8837675350701402)), (0, np.float64(0.8857715430861722)), (0, np.float64(0.8877755511022043)), (0, np.float64(0.8897795591182364)), (0, np.float64(0.8917835671342684)), (0, np.float64(0.8937875751503005)), (0, np.float64(0.8957915831663326)), (0, np.float64(0.8977955911823646)), (0, np.float64(0.8997995991983967)), (0, np.float64(0.9018036072144288)), (0, np.float64(0.9038076152304608)), (0, np.float64(0.9058116232464929)), (0, np.float64(0.907815631262525)), (0, np.float64(0.909819639278557)), (0, np.float64(0.9118236472945891)), (0, np.float64(0.9138276553106212)), (0, np.float64(0.9158316633266532)), (0, np.float64(0.9178356713426853)), (0, np.float64(0.9198396793587174)), (0, np.float64(0.9218436873747494)), (0, np.float64(0.9238476953907815)), (0, np.float64(0.9258517034068136)), (0, np.float64(0.9278557114228456)), (0, np.float64(0.9298597194388777)), (0, np.float64(0.9318637274549098)), (0, np.float64(0.9338677354709418)), (0, np.float64(0.9358717434869739)), (0, np.float64(0.937875751503006)), (0, np.float64(0.939879759519038)), (0, np.float64(0.9418837675350701)), (0, np.float64(0.9438877755511021)), (0, np.float64(0.9458917835671342)), (0, np.float64(0.9478957915831663)), (0, np.float64(0.9498997995991983)), (0, np.float64(0.9519038076152304)), (0, np.float64(0.9539078156312625)), (0, np.float64(0.9559118236472945)), (0, np.float64(0.9579158316633266)), (0, np.float64(0.9599198396793587)), (0, np.float64(0.9619238476953907)), (0, np.float64(0.9639278557114228)), (0, np.float64(0.9659318637274549)), (0, np.float64(0.9679358717434869)), (0, np.float64(0.969939879759519)), (0, np.float64(0.9719438877755511)), (0, np.float64(0.9739478957915831)), (0, np.float64(0.9759519038076151)), (0, np.float64(0.9779559118236472)), (0, np.float64(0.9799599198396792)), (0, np.float64(0.9819639278557113)), (0, np.float64(0.9839679358717434)), (0, np.float64(0.9859719438877754)), (0, np.float64(0.9879759519038075)), (0, np.float64(0.9899799599198396)), (0, np.float64(0.9919839679358716)), (0, np.float64(0.9939879759519037)), (0, np.float64(0.9959919839679358)), (0, np.float64(0.9979959919839678)), (0, np.float64(1.0)), (0.7853981633974483, np.float64(0.04208416833667334)), (0.7853981633974483, np.float64(0.374749498997996)), (0.7853981633974483, np.float64(0.7074148296593186)), (0.7853981633974483, np.float64(0.7094188376753506))]
1.5707963267948966 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266)), (-1.5707963267948966, np.float64(0.04208416833667334)), (-1.5707963267948966, np.float64(0.20841683366733466)), (-1.5707963267948966, np.float64(0.374749498997996)), (-1.5707963267948966, np.float64(0.5410821643286573)), (-1.5707963267948966, np.float64(0.7074148296593186)), (-1.5707963267948966, np.float64(0.8757515030060119)), (-0.7853981633974483, np.float64(0.04208416833667334)), (-0.7853981633974483, np.float64(0.374749498997996)), (-0.7853981633974483, np.float64(0.7074148296593186)), (-0.7853981633974483, np.float64(0.7094188376753506)), (0, np.float64(0.0)), (0, np.float64(0.002004008016032064)), (0, np.float64(0.004008016032064128)), (0, np.float64(0.0060120240480961915)), (0, np.float64(0.008016032064128256)), (0, np.float64(0.01002004008016032)), (0, np.float64(0.012024048096192383)), (0, np.float64(0.014028056112224447)), (0, np.float64(0.01603206412825651)), (0, np.float64(0.018036072144288574)), (0, np.float64(0.02004008016032064)), (0, np.float64(0.022044088176352703)), (0, np.float64(0.024048096192384766)), (0, np.float64(0.026052104208416832)), (0, np.float64(0.028056112224448895)), (0, np.float64(0.03006012024048096)), (0, np.float64(0.03206412825651302)), (0, np.float64(0.03406813627254509)), (0, np.float64(0.03607214428857715)), (0, np.float64(0.038076152304609215)), (0, np.float64(0.04008016032064128)), (0, np.float64(0.04208416833667334)), (0, np.float64(0.044088176352705406)), (0, np.float64(0.04609218436873747)), (0, np.float64(0.04809619238476953)), (0, np.float64(0.0501002004008016)), (0, np.float64(0.052104208416833664)), (0, np.float64(0.05410821643286573)), (0, np.float64(0.05611222444889779)), (0, np.float64(0.058116232464929855)), (0, np.float64(0.06012024048096192)), (0, np.float64(0.06212424849699398)), (0, np.float64(0.06412825651302605)), (0, np.float64(0.06613226452905811)), (0, np.float64(0.06813627254509018)), (0, np.float64(0.07014028056112225)), (0, np.float64(0.0721442885771543)), (0, np.float64(0.07414829659318636)), (0, np.float64(0.07615230460921843)), (0, np.float64(0.0781563126252505)), (0, np.float64(0.08016032064128256)), (0, np.float64(0.08216432865731463)), (0, np.float64(0.08416833667334668)), (0, np.float64(0.08617234468937875)), (0, np.float64(0.08817635270541081)), (0, np.float64(0.09018036072144288)), (0, np.float64(0.09218436873747494)), (0, np.float64(0.09418837675350701)), (0, np.float64(0.09619238476953906)), (0, np.float64(0.09819639278557113)), (0, np.float64(0.1002004008016032)), (0, np.float64(0.10220440881763526)), (0, np.float64(0.10420841683366733)), (0, np.float64(0.1062124248496994)), (0, np.float64(0.10821643286573146)), (0, np.float64(0.11022044088176351)), (0, np.float64(0.11222444889779558)), (0, np.float64(0.11422845691382764)), (0, np.float64(0.11623246492985971)), (0, np.float64(0.11823647294589178)), (0, np.float64(0.12024048096192384)), (0, np.float64(0.1222444889779559)), (0, np.float64(0.12424849699398796)), (0, np.float64(0.12625250501002003)), (0, np.float64(0.1282565130260521)), (0, np.float64(0.13026052104208416)), (0, np.float64(0.13226452905811623)), (0, np.float64(0.1342685370741483)), (0, np.float64(0.13627254509018036)), (0, np.float64(0.13827655310621242)), (0, np.float64(0.1402805611222445)), (0, np.float64(0.14228456913827653)), (0, np.float64(0.1442885771543086)), (0, np.float64(0.14629258517034066)), (0, np.float64(0.14829659318637273)), (0, np.float64(0.1503006012024048)), (0, np.float64(0.15230460921843686)), (0, np.float64(0.15430861723446893)), (0, np.float64(0.156312625250501)), (0, np.float64(0.15831663326653306)), (0, np.float64(0.16032064128256512)), (0, np.float64(0.1623246492985972)), (0, np.float64(0.16432865731462926)), (0, np.float64(0.16633266533066132)), (0, np.float64(0.16833667334669336)), (0, np.float64(0.17034068136272543)), (0, np.float64(0.1723446893787575)), (0, np.float64(0.17434869739478956)), (0, np.float64(0.17635270541082163)), (0, np.float64(0.1783567134268537)), (0, np.float64(0.18036072144288576)), (0, np.float64(0.18236472945891782)), (0, np.float64(0.1843687374749499)), (0, np.float64(0.18637274549098196)), (0, np.float64(0.18837675350701402)), (0, np.float64(0.1903807615230461)), (0, np.float64(0.19238476953907813)), (0, np.float64(0.1943887775551102)), (0, np.float64(0.19639278557114226)), (0, np.float64(0.19839679358717432)), (0, np.float64(0.2004008016032064)), (0, np.float64(0.20240480961923846)), (0, np.float64(0.20440881763527052)), (0, np.float64(0.2064128256513026)), (0, np.float64(0.20841683366733466)), (0, np.float64(0.21042084168336672)), (0, np.float64(0.2124248496993988)), (0, np.float64(0.21442885771543085)), (0, np.float64(0.21643286573146292)), (0, np.float64(0.21843687374749496)), (0, np.float64(0.22044088176352702)), (0, np.float64(0.2224448897795591)), (0, np.float64(0.22444889779559116)), (0, np.float64(0.22645290581162322)), (0, np.float64(0.2284569138276553)), (0, np.float64(0.23046092184368736)), (0, np.float64(0.23246492985971942)), (0, np.float64(0.2344689378757515)), (0, np.float64(0.23647294589178355)), (0, np.float64(0.23847695390781562)), (0, np.float64(0.24048096192384769)), (0, np.float64(0.24248496993987975)), (0, np.float64(0.2444889779559118)), (0, np.float64(0.24649298597194386)), (0, np.float64(0.24849699398797592)), (0, np.float64(0.250501002004008)), (0, np.float64(0.25250501002004005)), (0, np.float64(0.2545090180360721)), (0, np.float64(0.2565130260521042)), (0, np.float64(0.25851703406813625)), (0, np.float64(0.2605210420841683)), (0, np.float64(0.2625250501002004)), (0, np.float64(0.26452905811623245)), (0, np.float64(0.2665330661322645)), (0, np.float64(0.2685370741482966)), (0, np.float64(0.27054108216432865)), (0, np.float64(0.2725450901803607)), (0, np.float64(0.2745490981963928)), (0, np.float64(0.27655310621242485)), (0, np.float64(0.2785571142284569)), (0, np.float64(0.280561122244489)), (0, np.float64(0.282565130260521)), (0, np.float64(0.28456913827655306)), (0, np.float64(0.2865731462925851)), (0, np.float64(0.2885771543086172)), (0, np.float64(0.29058116232464926)), (0, np.float64(0.2925851703406813)), (0, np.float64(0.2945891783567134)), (0, np.float64(0.29659318637274545)), (0, np.float64(0.2985971943887775)), (0, np.float64(0.3006012024048096)), (0, np.float64(0.30260521042084165)), (0, np.float64(0.3046092184368737)), (0, np.float64(0.3066132264529058)), (0, np.float64(0.30861723446893785)), (0, np.float64(0.3106212424849699)), (0, np.float64(0.312625250501002)), (0, np.float64(0.31462925851703405)), (0, np.float64(0.3166332665330661)), (0, np.float64(0.3186372745490982)), (0, np.float64(0.32064128256513025)), (0, np.float64(0.3226452905811623)), (0, np.float64(0.3246492985971944)), (0, np.float64(0.32665330661322645)), (0, np.float64(0.3286573146292585)), (0, np.float64(0.3306613226452906)), (0, np.float64(0.33266533066132264)), (0, np.float64(0.33466933867735466)), (0, np.float64(0.3366733466933867)), (0, np.float64(0.3386773547094188)), (0, np.float64(0.34068136272545085)), (0, np.float64(0.3426853707414829)), (0, np.float64(0.344689378757515)), (0, np.float64(0.34669338677354705)), (0, np.float64(0.3486973947895791)), (0, np.float64(0.3507014028056112)), (0, np.float64(0.35270541082164325)), (0, np.float64(0.3547094188376753)), (0, np.float64(0.3567134268537074)), (0, np.float64(0.35871743486973945)), (0, np.float64(0.3607214428857715)), (0, np.float64(0.3627254509018036)), (0, np.float64(0.36472945891783565)), (0, np.float64(0.3667334669338677)), (0, np.float64(0.3687374749498998)), (0, np.float64(0.37074148296593185)), (0, np.float64(0.3727454909819639)), (0, np.float64(0.374749498997996)), (0, np.float64(0.37675350701402804)), (0, np.float64(0.3787575150300601)), (0, np.float64(0.3807615230460922)), (0, np.float64(0.38276553106212424)), (0, np.float64(0.38476953907815625)), (0, np.float64(0.3867735470941883)), (0, np.float64(0.3887775551102204)), (0, np.float64(0.39078156312625245)), (0, np.float64(0.3927855711422845)), (0, np.float64(0.3947895791583166)), (0, np.float64(0.39679358717434865)), (0, np.float64(0.3987975951903807)), (0, np.float64(0.4008016032064128)), (0, np.float64(0.40280561122244485)), (0, np.float64(0.4048096192384769)), (0, np.float64(0.406813627254509)), (0, np.float64(0.40881763527054105)), (0, np.float64(0.4108216432865731)), (0, np.float64(0.4128256513026052)), (0, np.float64(0.41482965931863724)), (0, np.float64(0.4168336673346693)), (0, np.float64(0.4188376753507014)), (0, np.float64(0.42084168336673344)), (0, np.float64(0.4228456913827655)), (0, np.float64(0.4248496993987976)), (0, np.float64(0.42685370741482964)), (0, np.float64(0.4288577154308617)), (0, np.float64(0.4308617234468938)), (0, np.float64(0.43286573146292584)), (0, np.float64(0.4348697394789579)), (0, np.float64(0.4368737474949899)), (0, np.float64(0.438877755511022)), (0, np.float64(0.44088176352705405)), (0, np.float64(0.4428857715430861)), (0, np.float64(0.4448897795591182)), (0, np.float64(0.44689378757515025)), (0, np.float64(0.4488977955911823)), (0, np.float64(0.4509018036072144)), (0, np.float64(0.45290581162324645)), (0, np.float64(0.4549098196392785)), (0, np.float64(0.4569138276553106)), (0, np.float64(0.45891783567134264)), (0, np.float64(0.4609218436873747)), (0, np.float64(0.4629258517034068)), (0, np.float64(0.46492985971943884)), (0, np.float64(0.4669338677354709)), (0, np.float64(0.468937875751503)), (0, np.float64(0.47094188376753504)), (0, np.float64(0.4729458917835671)), (0, np.float64(0.4749498997995992)), (0, np.float64(0.47695390781563124)), (0, np.float64(0.4789579158316633)), (0, np.float64(0.48096192384769537)), (0, np.float64(0.48296593186372744)), (0, np.float64(0.4849699398797595)), (0, np.float64(0.48697394789579157)), (0, np.float64(0.4889779559118236)), (0, np.float64(0.49098196392785565)), (0, np.float64(0.4929859719438877)), (0, np.float64(0.4949899799599198)), (0, np.float64(0.49699398797595185)), (0, np.float64(0.4989979959919839)), (0, np.float64(0.501002004008016)), (0, np.float64(0.503006012024048)), (0, np.float64(0.5050100200400801)), (0, np.float64(0.5070140280561122)), (0, np.float64(0.5090180360721442)), (0, np.float64(0.5110220440881763)), (0, np.float64(0.5130260521042084)), (0, np.float64(0.5150300601202404)), (0, np.float64(0.5170340681362725)), (0, np.float64(0.5190380761523046)), (0, np.float64(0.5210420841683366)), (0, np.float64(0.5230460921843687)), (0, np.float64(0.5250501002004008)), (0, np.float64(0.5270541082164328)), (0, np.float64(0.5290581162324649)), (0, np.float64(0.531062124248497)), (0, np.float64(0.533066132264529)), (0, np.float64(0.5350701402805611)), (0, np.float64(0.5370741482965932)), (0, np.float64(0.5390781563126252)), (0, np.float64(0.5410821643286573)), (0, np.float64(0.5430861723446894)), (0, np.float64(0.5450901803607214)), (0, np.float64(0.5470941883767535)), (0, np.float64(0.5490981963927856)), (0, np.float64(0.5511022044088176)), (0, np.float64(0.5531062124248497)), (0, np.float64(0.5551102204408818)), (0, np.float64(0.5571142284569138)), (0, np.float64(0.5591182364729459)), (0, np.float64(0.561122244488978)), (0, np.float64(0.56312625250501)), (0, np.float64(0.565130260521042)), (0, np.float64(0.567134268537074)), (0, np.float64(0.5691382765531061)), (0, np.float64(0.5711422845691382)), (0, np.float64(0.5731462925851702)), (0, np.float64(0.5751503006012023)), (0, np.float64(0.5771543086172344)), (0, np.float64(0.5791583166332664)), (0, np.float64(0.5811623246492985)), (0, np.float64(0.5831663326653306)), (0, np.float64(0.5851703406813626)), (0, np.float64(0.5871743486973947)), (0, np.float64(0.5891783567134268)), (0, np.float64(0.5911823647294588)), (0, np.float64(0.5931863727454909)), (0, np.float64(0.595190380761523)), (0, np.float64(0.597194388777555)), (0, np.float64(0.5991983967935871)), (0, np.float64(0.6012024048096192)), (0, np.float64(0.6032064128256512)), (0, np.float64(0.6052104208416833)), (0, np.float64(0.6072144288577154)), (0, np.float64(0.6092184368737474)), (0, np.float64(0.6112224448897795)), (0, np.float64(0.6132264529058116)), (0, np.float64(0.6152304609218436)), (0, np.float64(0.6172344689378757)), (0, np.float64(0.6192384769539078)), (0, np.float64(0.6212424849699398)), (0, np.float64(0.6232464929859719)), (0, np.float64(0.625250501002004)), (0, np.float64(0.627254509018036)), (0, np.float64(0.6292585170340681)), (0, np.float64(0.6312625250501002)), (0, np.float64(0.6332665330661322)), (0, np.float64(0.6352705410821643)), (0, np.float64(0.6372745490981964)), (0, np.float64(0.6392785571142284)), (0, np.float64(0.6412825651302605)), (0, np.float64(0.6432865731462926)), (0, np.float64(0.6452905811623246)), (0, np.float64(0.6472945891783567)), (0, np.float64(0.6492985971943888)), (0, np.float64(0.6513026052104208)), (0, np.float64(0.6533066132264529)), (0, np.float64(0.655310621242485)), (0, np.float64(0.657314629258517)), (0, np.float64(0.6593186372745491)), (0, np.float64(0.6613226452905812)), (0, np.float64(0.6633266533066132)), (0, np.float64(0.6653306613226453)), (0, np.float64(0.6673346693386772)), (0, np.float64(0.6693386773547093)), (0, np.float64(0.6713426853707414)), (0, np.float64(0.6733466933867734)), (0, np.float64(0.6753507014028055)), (0, np.float64(0.6773547094188376)), (0, np.float64(0.6793587174348696)), (0, np.float64(0.6813627254509017)), (0, np.float64(0.6833667334669338)), (0, np.float64(0.6853707414829658)), (0, np.float64(0.6873747494989979)), (0, np.float64(0.68937875751503)), (0, np.float64(0.691382765531062)), (0, np.float64(0.6933867735470941)), (0, np.float64(0.6953907815631262)), (0, np.float64(0.6973947895791582)), (0, np.float64(0.6993987975951903)), (0, np.float64(0.7014028056112224)), (0, np.float64(0.7034068136272544)), (0, np.float64(0.7054108216432865)), (0, np.float64(0.7074148296593186)), (0, np.float64(0.7094188376753506)), (0, np.float64(0.7114228456913827)), (0, np.float64(0.7134268537074148)), (0, np.float64(0.7154308617234468)), (0, np.float64(0.7174348697394789)), (0, np.float64(0.719438877755511)), (0, np.float64(0.721442885771543)), (0, np.float64(0.7234468937875751)), (0, np.float64(0.7254509018036072)), (0, np.float64(0.7274549098196392)), (0, np.float64(0.7294589178356713)), (0, np.float64(0.7314629258517034)), (0, np.float64(0.7334669338677354)), (0, np.float64(0.7354709418837675)), (0, np.float64(0.7374749498997996)), (0, np.float64(0.7394789579158316)), (0, np.float64(0.7414829659318637)), (0, np.float64(0.7434869739478958)), (0, np.float64(0.7454909819639278)), (0, np.float64(0.7474949899799599)), (0, np.float64(0.749498997995992)), (0, np.float64(0.751503006012024)), (0, np.float64(0.7535070140280561)), (0, np.float64(0.7555110220440882)), (0, np.float64(0.7575150300601202)), (0, np.float64(0.7595190380761523)), (0, np.float64(0.7615230460921844)), (0, np.float64(0.7635270541082164)), (0, np.float64(0.7655310621242485)), (0, np.float64(0.7675350701402806)), (0, np.float64(0.7695390781563125)), (0, np.float64(0.7715430861723446)), (0, np.float64(0.7735470941883766)), (0, np.float64(0.7755511022044087)), (0, np.float64(0.7775551102204408)), (0, np.float64(0.7795591182364728)), (0, np.float64(0.7815631262525049)), (0, np.float64(0.783567134268537)), (0, np.float64(0.785571142284569)), (0, np.float64(0.7875751503006011)), (0, np.float64(0.7895791583166332)), (0, np.float64(0.7915831663326652)), (0, np.float64(0.7935871743486973)), (0, np.float64(0.7955911823647294)), (0, np.float64(0.7975951903807614)), (0, np.float64(0.7995991983967935)), (0, np.float64(0.8016032064128256)), (0, np.float64(0.8036072144288576)), (0, np.float64(0.8056112224448897)), (0, np.float64(0.8076152304609218)), (0, np.float64(0.8096192384769538)), (0, np.float64(0.8116232464929859)), (0, np.float64(0.813627254509018)), (0, np.float64(0.81563126252505)), (0, np.float64(0.8176352705410821)), (0, np.float64(0.8196392785571142)), (0, np.float64(0.8216432865731462)), (0, np.float64(0.8236472945891783)), (0, np.float64(0.8256513026052104)), (0, np.float64(0.8276553106212424)), (0, np.float64(0.8296593186372745)), (0, np.float64(0.8316633266533066)), (0, np.float64(0.8336673346693386)), (0, np.float64(0.8356713426853707)), (0, np.float64(0.8376753507014028)), (0, np.float64(0.8396793587174348)), (0, np.float64(0.8416833667334669)), (0, np.float64(0.843687374749499)), (0, np.float64(0.845691382765531)), (0, np.float64(0.8476953907815631)), (0, np.float64(0.8496993987975952)), (0, np.float64(0.8517034068136272)), (0, np.float64(0.8537074148296593)), (0, np.float64(0.8557114228456913)), (0, np.float64(0.8577154308617234)), (0, np.float64(0.8597194388777555)), (0, np.float64(0.8617234468937875)), (0, np.float64(0.8637274549098196)), (0, np.float64(0.8657314629258517)), (0, np.float64(0.8677354709418837)), (0, np.float64(0.8697394789579158)), (0, np.float64(0.8717434869739479)), (0, np.float64(0.8737474949899798)), (0, np.float64(0.8757515030060119)), (0, np.float64(0.877755511022044)), (0, np.float64(0.879759519038076)), (0, np.float64(0.8817635270541081)), (0, np.float64(0.8837675350701402)), (0, np.float64(0.8857715430861722)), (0, np.float64(0.8877755511022043)), (0, np.float64(0.8897795591182364)), (0, np.float64(0.8917835671342684)), (0, np.float64(0.8937875751503005)), (0, np.float64(0.8957915831663326)), (0, np.float64(0.8977955911823646)), (0, np.float64(0.8997995991983967)), (0, np.float64(0.9018036072144288)), (0, np.float64(0.9038076152304608)), (0, np.float64(0.9058116232464929)), (0, np.float64(0.907815631262525)), (0, np.float64(0.909819639278557)), (0, np.float64(0.9118236472945891)), (0, np.float64(0.9138276553106212)), (0, np.float64(0.9158316633266532)), (0, np.float64(0.9178356713426853)), (0, np.float64(0.9198396793587174)), (0, np.float64(0.9218436873747494)), (0, np.float64(0.9238476953907815)), (0, np.float64(0.9258517034068136)), (0, np.float64(0.9278557114228456)), (0, np.float64(0.9298597194388777)), (0, np.float64(0.9318637274549098)), (0, np.float64(0.9338677354709418)), (0, np.float64(0.9358717434869739)), (0, np.float64(0.937875751503006)), (0, np.float64(0.939879759519038)), (0, np.float64(0.9418837675350701)), (0, np.float64(0.9438877755511021)), (0, np.float64(0.9458917835671342)), (0, np.float64(0.9478957915831663)), (0, np.float64(0.9498997995991983)), (0, np.float64(0.9519038076152304)), (0, np.float64(0.9539078156312625)), (0, np.float64(0.9559118236472945)), (0, np.float64(0.9579158316633266)), (0, np.float64(0.9599198396793587)), (0, np.float64(0.9619238476953907)), (0, np.float64(0.9639278557114228)), (0, np.float64(0.9659318637274549)), (0, np.float64(0.9679358717434869)), (0, np.float64(0.969939879759519)), (0, np.float64(0.9719438877755511)), (0, np.float64(0.9739478957915831)), (0, np.float64(0.9759519038076151)), (0, np.float64(0.9779559118236472)), (0, np.float64(0.9799599198396792)), (0, np.float64(0.9819639278557113)), (0, np.float64(0.9839679358717434)), (0, np.float64(0.9859719438877754)), (0, np.float64(0.9879759519038075)), (0, np.float64(0.9899799599198396)), (0, np.float64(0.9919839679358716)), (0, np.float64(0.9939879759519037)), (0, np.float64(0.9959919839679358)), (0, np.float64(0.9979959919839678)), (0, np.float64(1.0)), (0.7853981633974483, np.float64(0.04208416833667334)), (0.7853981633974483, np.float64(0.374749498997996)), (0.7853981633974483, np.float64(0.7074148296593186)), (0.7853981633974483, np.float64(0.7094188376753506)), (1.5707963267948966, np.float64(0.04208416833667334)), (1.5707963267948966, np.float64(0.20841683366733466)), (1.5707963267948966, np.float64(0.374749498997996)), (1.5707963267948966, np.float64(0.5410821643286573)), (1.5707963267948966, np.float64(0.7074148296593186)), (1.5707963267948966, np.float64(0.8757515030060119))]
3.141592653589793 computing...
[(-3.141592653589793, np.float64(0.04208416833667334)), (-3.141592653589793, np.float64(0.20841683366733466)), (-3.141592653589793, np.float64(0.374749498997996)), (-3.141592653589793, np.float64(0.625250501002004)), (-3.141592653589793, np.float64(0.7915831663326652)), (-3.141592653589793, np.float64(0.9579158316633266)), (-1.5707963267948966, np.float64(0.04208416833667334)), (-1.5707963267948966, np.float64(0.20841683366733466)), (-1.5707963267948966, np.float64(0.374749498997996)), (-1.5707963267948966, np.float64(0.5410821643286573)), (-1.5707963267948966, np.float64(0.7074148296593186)), (-1.5707963267948966, np.float64(0.8757515030060119)), (-0.7853981633974483, np.float64(0.04208416833667334)), (-0.7853981633974483, np.float64(0.374749498997996)), (-0.7853981633974483, np.float64(0.7074148296593186)), (-0.7853981633974483, np.float64(0.7094188376753506)), (0, np.float64(0.0)), (0, np.float64(0.002004008016032064)), (0, np.float64(0.004008016032064128)), (0, np.float64(0.0060120240480961915)), (0, np.float64(0.008016032064128256)), (0, np.float64(0.01002004008016032)), (0, np.float64(0.012024048096192383)), (0, np.float64(0.014028056112224447)), (0, np.float64(0.01603206412825651)), (0, np.float64(0.018036072144288574)), (0, np.float64(0.02004008016032064)), (0, np.float64(0.022044088176352703)), (0, np.float64(0.024048096192384766)), (0, np.float64(0.026052104208416832)), (0, np.float64(0.028056112224448895)), (0, np.float64(0.03006012024048096)), (0, np.float64(0.03206412825651302)), (0, np.float64(0.03406813627254509)), (0, np.float64(0.03607214428857715)), (0, np.float64(0.038076152304609215)), (0, np.float64(0.04008016032064128)), (0, np.float64(0.04208416833667334)), (0, np.float64(0.044088176352705406)), (0, np.float64(0.04609218436873747)), (0, np.float64(0.04809619238476953)), (0, np.float64(0.0501002004008016)), (0, np.float64(0.052104208416833664)), (0, np.float64(0.05410821643286573)), (0, np.float64(0.05611222444889779)), (0, np.float64(0.058116232464929855)), (0, np.float64(0.06012024048096192)), (0, np.float64(0.06212424849699398)), (0, np.float64(0.06412825651302605)), (0, np.float64(0.06613226452905811)), (0, np.float64(0.06813627254509018)), (0, np.float64(0.07014028056112225)), (0, np.float64(0.0721442885771543)), (0, np.float64(0.07414829659318636)), (0, np.float64(0.07615230460921843)), (0, np.float64(0.0781563126252505)), (0, np.float64(0.08016032064128256)), (0, np.float64(0.08216432865731463)), (0, np.float64(0.08416833667334668)), (0, np.float64(0.08617234468937875)), (0, np.float64(0.08817635270541081)), (0, np.float64(0.09018036072144288)), (0, np.float64(0.09218436873747494)), (0, np.float64(0.09418837675350701)), (0, np.float64(0.09619238476953906)), (0, np.float64(0.09819639278557113)), (0, np.float64(0.1002004008016032)), (0, np.float64(0.10220440881763526)), (0, np.float64(0.10420841683366733)), (0, np.float64(0.1062124248496994)), (0, np.float64(0.10821643286573146)), (0, np.float64(0.11022044088176351)), (0, np.float64(0.11222444889779558)), (0, np.float64(0.11422845691382764)), (0, np.float64(0.11623246492985971)), (0, np.float64(0.11823647294589178)), (0, np.float64(0.12024048096192384)), (0, np.float64(0.1222444889779559)), (0, np.float64(0.12424849699398796)), (0, np.float64(0.12625250501002003)), (0, np.float64(0.1282565130260521)), (0, np.float64(0.13026052104208416)), (0, np.float64(0.13226452905811623)), (0, np.float64(0.1342685370741483)), (0, np.float64(0.13627254509018036)), (0, np.float64(0.13827655310621242)), (0, np.float64(0.1402805611222445)), (0, np.float64(0.14228456913827653)), (0, np.float64(0.1442885771543086)), (0, np.float64(0.14629258517034066)), (0, np.float64(0.14829659318637273)), (0, np.float64(0.1503006012024048)), (0, np.float64(0.15230460921843686)), (0, np.float64(0.15430861723446893)), (0, np.float64(0.156312625250501)), (0, np.float64(0.15831663326653306)), (0, np.float64(0.16032064128256512)), (0, np.float64(0.1623246492985972)), (0, np.float64(0.16432865731462926)), (0, np.float64(0.16633266533066132)), (0, np.float64(0.16833667334669336)), (0, np.float64(0.17034068136272543)), (0, np.float64(0.1723446893787575)), (0, np.float64(0.17434869739478956)), (0, np.float64(0.17635270541082163)), (0, np.float64(0.1783567134268537)), (0, np.float64(0.18036072144288576)), (0, np.float64(0.18236472945891782)), (0, np.float64(0.1843687374749499)), (0, np.float64(0.18637274549098196)), (0, np.float64(0.18837675350701402)), (0, np.float64(0.1903807615230461)), (0, np.float64(0.19238476953907813)), (0, np.float64(0.1943887775551102)), (0, np.float64(0.19639278557114226)), (0, np.float64(0.19839679358717432)), (0, np.float64(0.2004008016032064)), (0, np.float64(0.20240480961923846)), (0, np.float64(0.20440881763527052)), (0, np.float64(0.2064128256513026)), (0, np.float64(0.20841683366733466)), (0, np.float64(0.21042084168336672)), (0, np.float64(0.2124248496993988)), (0, np.float64(0.21442885771543085)), (0, np.float64(0.21643286573146292)), (0, np.float64(0.21843687374749496)), (0, np.float64(0.22044088176352702)), (0, np.float64(0.2224448897795591)), (0, np.float64(0.22444889779559116)), (0, np.float64(0.22645290581162322)), (0, np.float64(0.2284569138276553)), (0, np.float64(0.23046092184368736)), (0, np.float64(0.23246492985971942)), (0, np.float64(0.2344689378757515)), (0, np.float64(0.23647294589178355)), (0, np.float64(0.23847695390781562)), (0, np.float64(0.24048096192384769)), (0, np.float64(0.24248496993987975)), (0, np.float64(0.2444889779559118)), (0, np.float64(0.24649298597194386)), (0, np.float64(0.24849699398797592)), (0, np.float64(0.250501002004008)), (0, np.float64(0.25250501002004005)), (0, np.float64(0.2545090180360721)), (0, np.float64(0.2565130260521042)), (0, np.float64(0.25851703406813625)), (0, np.float64(0.2605210420841683)), (0, np.float64(0.2625250501002004)), (0, np.float64(0.26452905811623245)), (0, np.float64(0.2665330661322645)), (0, np.float64(0.2685370741482966)), (0, np.float64(0.27054108216432865)), (0, np.float64(0.2725450901803607)), (0, np.float64(0.2745490981963928)), (0, np.float64(0.27655310621242485)), (0, np.float64(0.2785571142284569)), (0, np.float64(0.280561122244489)), (0, np.float64(0.282565130260521)), (0, np.float64(0.28456913827655306)), (0, np.float64(0.2865731462925851)), (0, np.float64(0.2885771543086172)), (0, np.float64(0.29058116232464926)), (0, np.float64(0.2925851703406813)), (0, np.float64(0.2945891783567134)), (0, np.float64(0.29659318637274545)), (0, np.float64(0.2985971943887775)), (0, np.float64(0.3006012024048096)), (0, np.float64(0.30260521042084165)), (0, np.float64(0.3046092184368737)), (0, np.float64(0.3066132264529058)), (0, np.float64(0.30861723446893785)), (0, np.float64(0.3106212424849699)), (0, np.float64(0.312625250501002)), (0, np.float64(0.31462925851703405)), (0, np.float64(0.3166332665330661)), (0, np.float64(0.3186372745490982)), (0, np.float64(0.32064128256513025)), (0, np.float64(0.3226452905811623)), (0, np.float64(0.3246492985971944)), (0, np.float64(0.32665330661322645)), (0, np.float64(0.3286573146292585)), (0, np.float64(0.3306613226452906)), (0, np.float64(0.33266533066132264)), (0, np.float64(0.33466933867735466)), (0, np.float64(0.3366733466933867)), (0, np.float64(0.3386773547094188)), (0, np.float64(0.34068136272545085)), (0, np.float64(0.3426853707414829)), (0, np.float64(0.344689378757515)), (0, np.float64(0.34669338677354705)), (0, np.float64(0.3486973947895791)), (0, np.float64(0.3507014028056112)), (0, np.float64(0.35270541082164325)), (0, np.float64(0.3547094188376753)), (0, np.float64(0.3567134268537074)), (0, np.float64(0.35871743486973945)), (0, np.float64(0.3607214428857715)), (0, np.float64(0.3627254509018036)), (0, np.float64(0.36472945891783565)), (0, np.float64(0.3667334669338677)), (0, np.float64(0.3687374749498998)), (0, np.float64(0.37074148296593185)), (0, np.float64(0.3727454909819639)), (0, np.float64(0.374749498997996)), (0, np.float64(0.37675350701402804)), (0, np.float64(0.3787575150300601)), (0, np.float64(0.3807615230460922)), (0, np.float64(0.38276553106212424)), (0, np.float64(0.38476953907815625)), (0, np.float64(0.3867735470941883)), (0, np.float64(0.3887775551102204)), (0, np.float64(0.39078156312625245)), (0, np.float64(0.3927855711422845)), (0, np.float64(0.3947895791583166)), (0, np.float64(0.39679358717434865)), (0, np.float64(0.3987975951903807)), (0, np.float64(0.4008016032064128)), (0, np.float64(0.40280561122244485)), (0, np.float64(0.4048096192384769)), (0, np.float64(0.406813627254509)), (0, np.float64(0.40881763527054105)), (0, np.float64(0.4108216432865731)), (0, np.float64(0.4128256513026052)), (0, np.float64(0.41482965931863724)), (0, np.float64(0.4168336673346693)), (0, np.float64(0.4188376753507014)), (0, np.float64(0.42084168336673344)), (0, np.float64(0.4228456913827655)), (0, np.float64(0.4248496993987976)), (0, np.float64(0.42685370741482964)), (0, np.float64(0.4288577154308617)), (0, np.float64(0.4308617234468938)), (0, np.float64(0.43286573146292584)), (0, np.float64(0.4348697394789579)), (0, np.float64(0.4368737474949899)), (0, np.float64(0.438877755511022)), (0, np.float64(0.44088176352705405)), (0, np.float64(0.4428857715430861)), (0, np.float64(0.4448897795591182)), (0, np.float64(0.44689378757515025)), (0, np.float64(0.4488977955911823)), (0, np.float64(0.4509018036072144)), (0, np.float64(0.45290581162324645)), (0, np.float64(0.4549098196392785)), (0, np.float64(0.4569138276553106)), (0, np.float64(0.45891783567134264)), (0, np.float64(0.4609218436873747)), (0, np.float64(0.4629258517034068)), (0, np.float64(0.46492985971943884)), (0, np.float64(0.4669338677354709)), (0, np.float64(0.468937875751503)), (0, np.float64(0.47094188376753504)), (0, np.float64(0.4729458917835671)), (0, np.float64(0.4749498997995992)), (0, np.float64(0.47695390781563124)), (0, np.float64(0.4789579158316633)), (0, np.float64(0.48096192384769537)), (0, np.float64(0.48296593186372744)), (0, np.float64(0.4849699398797595)), (0, np.float64(0.48697394789579157)), (0, np.float64(0.4889779559118236)), (0, np.float64(0.49098196392785565)), (0, np.float64(0.4929859719438877)), (0, np.float64(0.4949899799599198)), (0, np.float64(0.49699398797595185)), (0, np.float64(0.4989979959919839)), (0, np.float64(0.501002004008016)), (0, np.float64(0.503006012024048)), (0, np.float64(0.5050100200400801)), (0, np.float64(0.5070140280561122)), (0, np.float64(0.5090180360721442)), (0, np.float64(0.5110220440881763)), (0, np.float64(0.5130260521042084)), (0, np.float64(0.5150300601202404)), (0, np.float64(0.5170340681362725)), (0, np.float64(0.5190380761523046)), (0, np.float64(0.5210420841683366)), (0, np.float64(0.5230460921843687)), (0, np.float64(0.5250501002004008)), (0, np.float64(0.5270541082164328)), (0, np.float64(0.5290581162324649)), (0, np.float64(0.531062124248497)), (0, np.float64(0.533066132264529)), (0, np.float64(0.5350701402805611)), (0, np.float64(0.5370741482965932)), (0, np.float64(0.5390781563126252)), (0, np.float64(0.5410821643286573)), (0, np.float64(0.5430861723446894)), (0, np.float64(0.5450901803607214)), (0, np.float64(0.5470941883767535)), (0, np.float64(0.5490981963927856)), (0, np.float64(0.5511022044088176)), (0, np.float64(0.5531062124248497)), (0, np.float64(0.5551102204408818)), (0, np.float64(0.5571142284569138)), (0, np.float64(0.5591182364729459)), (0, np.float64(0.561122244488978)), (0, np.float64(0.56312625250501)), (0, np.float64(0.565130260521042)), (0, np.float64(0.567134268537074)), (0, np.float64(0.5691382765531061)), (0, np.float64(0.5711422845691382)), (0, np.float64(0.5731462925851702)), (0, np.float64(0.5751503006012023)), (0, np.float64(0.5771543086172344)), (0, np.float64(0.5791583166332664)), (0, np.float64(0.5811623246492985)), (0, np.float64(0.5831663326653306)), (0, np.float64(0.5851703406813626)), (0, np.float64(0.5871743486973947)), (0, np.float64(0.5891783567134268)), (0, np.float64(0.5911823647294588)), (0, np.float64(0.5931863727454909)), (0, np.float64(0.595190380761523)), (0, np.float64(0.597194388777555)), (0, np.float64(0.5991983967935871)), (0, np.float64(0.6012024048096192)), (0, np.float64(0.6032064128256512)), (0, np.float64(0.6052104208416833)), (0, np.float64(0.6072144288577154)), (0, np.float64(0.6092184368737474)), (0, np.float64(0.6112224448897795)), (0, np.float64(0.6132264529058116)), (0, np.float64(0.6152304609218436)), (0, np.float64(0.6172344689378757)), (0, np.float64(0.6192384769539078)), (0, np.float64(0.6212424849699398)), (0, np.float64(0.6232464929859719)), (0, np.float64(0.625250501002004)), (0, np.float64(0.627254509018036)), (0, np.float64(0.6292585170340681)), (0, np.float64(0.6312625250501002)), (0, np.float64(0.6332665330661322)), (0, np.float64(0.6352705410821643)), (0, np.float64(0.6372745490981964)), (0, np.float64(0.6392785571142284)), (0, np.float64(0.6412825651302605)), (0, np.float64(0.6432865731462926)), (0, np.float64(0.6452905811623246)), (0, np.float64(0.6472945891783567)), (0, np.float64(0.6492985971943888)), (0, np.float64(0.6513026052104208)), (0, np.float64(0.6533066132264529)), (0, np.float64(0.655310621242485)), (0, np.float64(0.657314629258517)), (0, np.float64(0.6593186372745491)), (0, np.float64(0.6613226452905812)), (0, np.float64(0.6633266533066132)), (0, np.float64(0.6653306613226453)), (0, np.float64(0.6673346693386772)), (0, np.float64(0.6693386773547093)), (0, np.float64(0.6713426853707414)), (0, np.float64(0.6733466933867734)), (0, np.float64(0.6753507014028055)), (0, np.float64(0.6773547094188376)), (0, np.float64(0.6793587174348696)), (0, np.float64(0.6813627254509017)), (0, np.float64(0.6833667334669338)), (0, np.float64(0.6853707414829658)), (0, np.float64(0.6873747494989979)), (0, np.float64(0.68937875751503)), (0, np.float64(0.691382765531062)), (0, np.float64(0.6933867735470941)), (0, np.float64(0.6953907815631262)), (0, np.float64(0.6973947895791582)), (0, np.float64(0.6993987975951903)), (0, np.float64(0.7014028056112224)), (0, np.float64(0.7034068136272544)), (0, np.float64(0.7054108216432865)), (0, np.float64(0.7074148296593186)), (0, np.float64(0.7094188376753506)), (0, np.float64(0.7114228456913827)), (0, np.float64(0.7134268537074148)), (0, np.float64(0.7154308617234468)), (0, np.float64(0.7174348697394789)), (0, np.float64(0.719438877755511)), (0, np.float64(0.721442885771543)), (0, np.float64(0.7234468937875751)), (0, np.float64(0.7254509018036072)), (0, np.float64(0.7274549098196392)), (0, np.float64(0.7294589178356713)), (0, np.float64(0.7314629258517034)), (0, np.float64(0.7334669338677354)), (0, np.float64(0.7354709418837675)), (0, np.float64(0.7374749498997996)), (0, np.float64(0.7394789579158316)), (0, np.float64(0.7414829659318637)), (0, np.float64(0.7434869739478958)), (0, np.float64(0.7454909819639278)), (0, np.float64(0.7474949899799599)), (0, np.float64(0.749498997995992)), (0, np.float64(0.751503006012024)), (0, np.float64(0.7535070140280561)), (0, np.float64(0.7555110220440882)), (0, np.float64(0.7575150300601202)), (0, np.float64(0.7595190380761523)), (0, np.float64(0.7615230460921844)), (0, np.float64(0.7635270541082164)), (0, np.float64(0.7655310621242485)), (0, np.float64(0.7675350701402806)), (0, np.float64(0.7695390781563125)), (0, np.float64(0.7715430861723446)), (0, np.float64(0.7735470941883766)), (0, np.float64(0.7755511022044087)), (0, np.float64(0.7775551102204408)), (0, np.float64(0.7795591182364728)), (0, np.float64(0.7815631262525049)), (0, np.float64(0.783567134268537)), (0, np.float64(0.785571142284569)), (0, np.float64(0.7875751503006011)), (0, np.float64(0.7895791583166332)), (0, np.float64(0.7915831663326652)), (0, np.float64(0.7935871743486973)), (0, np.float64(0.7955911823647294)), (0, np.float64(0.7975951903807614)), (0, np.float64(0.7995991983967935)), (0, np.float64(0.8016032064128256)), (0, np.float64(0.8036072144288576)), (0, np.float64(0.8056112224448897)), (0, np.float64(0.8076152304609218)), (0, np.float64(0.8096192384769538)), (0, np.float64(0.8116232464929859)), (0, np.float64(0.813627254509018)), (0, np.float64(0.81563126252505)), (0, np.float64(0.8176352705410821)), (0, np.float64(0.8196392785571142)), (0, np.float64(0.8216432865731462)), (0, np.float64(0.8236472945891783)), (0, np.float64(0.8256513026052104)), (0, np.float64(0.8276553106212424)), (0, np.float64(0.8296593186372745)), (0, np.float64(0.8316633266533066)), (0, np.float64(0.8336673346693386)), (0, np.float64(0.8356713426853707)), (0, np.float64(0.8376753507014028)), (0, np.float64(0.8396793587174348)), (0, np.float64(0.8416833667334669)), (0, np.float64(0.843687374749499)), (0, np.float64(0.845691382765531)), (0, np.float64(0.8476953907815631)), (0, np.float64(0.8496993987975952)), (0, np.float64(0.8517034068136272)), (0, np.float64(0.8537074148296593)), (0, np.float64(0.8557114228456913)), (0, np.float64(0.8577154308617234)), (0, np.float64(0.8597194388777555)), (0, np.float64(0.8617234468937875)), (0, np.float64(0.8637274549098196)), (0, np.float64(0.8657314629258517)), (0, np.float64(0.8677354709418837)), (0, np.float64(0.8697394789579158)), (0, np.float64(0.8717434869739479)), (0, np.float64(0.8737474949899798)), (0, np.float64(0.8757515030060119)), (0, np.float64(0.877755511022044)), (0, np.float64(0.879759519038076)), (0, np.float64(0.8817635270541081)), (0, np.float64(0.8837675350701402)), (0, np.float64(0.8857715430861722)), (0, np.float64(0.8877755511022043)), (0, np.float64(0.8897795591182364)), (0, np.float64(0.8917835671342684)), (0, np.float64(0.8937875751503005)), (0, np.float64(0.8957915831663326)), (0, np.float64(0.8977955911823646)), (0, np.float64(0.8997995991983967)), (0, np.float64(0.9018036072144288)), (0, np.float64(0.9038076152304608)), (0, np.float64(0.9058116232464929)), (0, np.float64(0.907815631262525)), (0, np.float64(0.909819639278557)), (0, np.float64(0.9118236472945891)), (0, np.float64(0.9138276553106212)), (0, np.float64(0.9158316633266532)), (0, np.float64(0.9178356713426853)), (0, np.float64(0.9198396793587174)), (0, np.float64(0.9218436873747494)), (0, np.float64(0.9238476953907815)), (0, np.float64(0.9258517034068136)), (0, np.float64(0.9278557114228456)), (0, np.float64(0.9298597194388777)), (0, np.float64(0.9318637274549098)), (0, np.float64(0.9338677354709418)), (0, np.float64(0.9358717434869739)), (0, np.float64(0.937875751503006)), (0, np.float64(0.939879759519038)), (0, np.float64(0.9418837675350701)), (0, np.float64(0.9438877755511021)), (0, np.float64(0.9458917835671342)), (0, np.float64(0.9478957915831663)), (0, np.float64(0.9498997995991983)), (0, np.float64(0.9519038076152304)), (0, np.float64(0.9539078156312625)), (0, np.float64(0.9559118236472945)), (0, np.float64(0.9579158316633266)), (0, np.float64(0.9599198396793587)), (0, np.float64(0.9619238476953907)), (0, np.float64(0.9639278557114228)), (0, np.float64(0.9659318637274549)), (0, np.float64(0.9679358717434869)), (0, np.float64(0.969939879759519)), (0, np.float64(0.9719438877755511)), (0, np.float64(0.9739478957915831)), (0, np.float64(0.9759519038076151)), (0, np.float64(0.9779559118236472)), (0, np.float64(0.9799599198396792)), (0, np.float64(0.9819639278557113)), (0, np.float64(0.9839679358717434)), (0, np.float64(0.9859719438877754)), (0, np.float64(0.9879759519038075)), (0, np.float64(0.9899799599198396)), (0, np.float64(0.9919839679358716)), (0, np.float64(0.9939879759519037)), (0, np.float64(0.9959919839679358)), (0, np.float64(0.9979959919839678)), (0, np.float64(1.0)), (0.7853981633974483, np.float64(0.04208416833667334)), (0.7853981633974483, np.float64(0.374749498997996)), (0.7853981633974483, np.float64(0.7074148296593186)), (0.7853981633974483, np.float64(0.7094188376753506)), (1.5707963267948966, np.float64(0.04208416833667334)), (1.5707963267948966, np.float64(0.20841683366733466)), (1.5707963267948966, np.float64(0.374749498997996)), (1.5707963267948966, np.float64(0.5410821643286573)), (1.5707963267948966, np.float64(0.7074148296593186)), (1.5707963267948966, np.float64(0.8757515030060119)), (3.141592653589793, np.float64(0.04208416833667334)), (3.141592653589793, np.float64(0.20841683366733466)), (3.141592653589793, np.float64(0.374749498997996)), (3.141592653589793, np.float64(0.625250501002004)), (3.141592653589793, np.float64(0.7915831663326652)), (3.141592653589793, np.float64(0.9579158316633266))]


####
RZ optimizing result: Seed 0: Best k: 6.87777037921978, Best Similarity: 0.8398979778258159; init_values = 20 (12 hours on laptop)
#########################
#########################
def RZ_pulseMULT(theta, current_state, plot_prob=False, plot_blochsphere=False):
    """
    Implements an RZ gate (rotation around Z-axis) by angle theta on all qubits in current_state.
    Uses a constant drive Hamiltonian with Z operator, with final state transformed to lab frame.
    """
    num_qubits = int(np.log2(current_state.dim))
    # expected_state = current_state.evolve(RZGate(theta).control(num_qubits))

    t_span = np.linspace(0, duration * dt_, duration + 1)
    t_max = t_span[-1]

    # RZ:
    k = 5.524648297886591
    drive_strength = (theta / 2 - 5.0 / 2 * 12 + 2 * np.pi * k) / 12
    # RZdrive_strength = theta / (2 * t_max)

    drive_strength = - drive_strength

    H_static_single = static_hamiltonian(omega=omega)
    H_drive_Z_single = SIGMA_Z

    H_static_multi = sum_operator(H_static_single, num_qubits)
    H_drive_Z_multi = sum_operator(H_drive_Z_single, num_qubits)

    ham_solver = Solver(
        static_hamiltonian=H_static_multi,
        hamiltonian_operators=[H_drive_Z_multi],
        rotating_frame=H_static_multi
    )

    def constant_envelope(t):
        return drive_strength

    signal = Signal(
        envelope=constant_envelope,
        carrier_freq=0.0,  # No oscillation for Z drive
        phase=0.0
    )

    result = ham_solver.solve(
        t_span=t_span,
        y0=current_state,
        method='jax_odeint',
        signals=[signal]
    )

    # Transform final state from rotating frame to lab frame
    U_static = expm(-1j * H_static_multi * t_max)
    # final_state_rot = result.y[-1].data
    # final_state_lab = U_static @ final_state_rot
    # final_state_lab = Statevector(final_state_lab)

    # Compute probabilities (frame-invariant)
    # state_probs = prob(result.y)
    # final_probs = prob(result.y[-1])

    # Compute overlap in lab frame
    # ol = overlap(expected_state, final_state_lab)

    # Optionally transform all states for plotting (lab frame)
    # if plot_prob:
    #     plot_probabilities
    # print(f"initial state: {current_state}")
    # print(f"result.y[-1]: {result.y[-1]}")
    # print(f"U_static shape: {U_static.shape}")
    if plot_blochsphere:
        trajectory_lab = []
        for state in result.y:
            # print(f"state.data shape: {state.data.shape}")
            trajectory_lab.append(Statevector(U_static @ state.data))
        bloch_sphere_multiqubit_trajectory(trajectory_lab, list(range(num_qubits)), False)

    return None, None, result.y
##############################################################
seed:  0
Running batch 1 with 200 calls (total: 0)...
Restart 1, Batch 1:
  Best parameters: g=0.02, ds=0.6548949624164631, cnot_dur=218, cnot_p=1.6180767517079657, cnot_sigma=2.6441455135784224
  Maximum average similarity: 0.5185538132556832
--------------------

Individual results for the best parameters:
Expected: [0.70710678+0.j 0.        +0.j 0.        +0.j 0.70710678+0.j]
CNOTEcho: [ 0.00454271+0.01657391j, -0.77202231+0.47958618j, -0.00904374+0.02070393j,  0.40938935-0.07465993j]
Similarity: 0.4696842462955894

Expected: [0.        +0.j 0.70710678+0.j 0.70710678+0.j 0.        +0.j]
CNOTEcho: [-0.86432178+0.41915655j,  0.00428468+0.01914694j, 0.27564471-0.02169665j, -0.01143626+0.01702973j]
Similarity: 0.44910156417797986

Expected: [ 0.70710678+0.j  0.        +0.j  0.        +0.j -0.70710678+0.j]
CNOTEcho: [ 0.00900542+0.02071942j, -0.40938942-0.07465986j, 0.00457516-0.01656832j, -0.77202228-0.47958611j]
Similarity: 0.557871209827482

Expected: [ 0.        +0.j  0.70710678+0.j -0.70710678+0.j  0.        +0.j]
CNOTEcho: [-0.27564477-0.02169663j,  0.01146805+0.01700736j, -0.86432169-0.4191566j ,  0.0042505 -0.01915756j]
Similarity: 0.5975582327216814
--------------------


Running batch 2 with 200 calls (total: 200)...
Restart 1, Batch 2:
  Best parameters: g=0.02, ds=1.0969430649707914, cnot_dur=269, cnot_p=0.0, cnot_sigma=1.426874545187033
  Maximum average similarity: 0.5991028038624477
--------------------

Individual results for the best parameters:
Expected: [0.70710678+0.j 0.        +0.j 0.        +0.j 0.70710678+0.j],
CNOTEcho: Statevector([ 0.02386582+0.02765518j, -0.6795538 +0.02786824j, 0.02019788+0.05999625j,  0.7292718 +0.0158592j ],
            dims=(2, 2)), Similarity: 0.6158658712615058
Expected: [0.        +0.j 0.70710678+0.j 0.70710678+0.j 0.        +0.j], CNOTEcho: Statevector([-0.67867772-0.01739222j,  0.02233691+0.02892127j,
              0.72808279+0.06040179j,  0.01611327+0.06121174j],
            dims=(2, 2)), Similarity: 0.6078840273394515
Expected: [ 0.70710678+0.j  0.        +0.j  0.        +0.j -0.70710678+0.j], CNOTEcho: Statevector([-0.02030952+0.05995637j, -0.72927198+0.0158592j ,
              0.02391724-0.02761282j, -0.67955371-0.02786811j],
            dims=(2, 2)), Similarity: 0.5901362296916658
Expected: [ 0.        +0.j  0.70710678+0.j -0.70710678+0.j  0.        +0.j], CNOTEcho: Statevector([-0.72808298+0.06040168j, -0.01599953+0.06123937j,
             -0.67867763+0.01739224j,  0.02228309-0.02896483j],
            dims=(2, 2)), Similarity: 0.5825250871571679
--------------------


Running batch 3 with 200 calls (total: 400)...


###############################################################################################
--------------------------------------------------------------------------------------
MEMORY ERROR n_calls = 1000, 4 pairs
C:\pythonProject\fourier-pulse-qc\.venv\Scripts\python.exe C:\pythonProject\fourier-pulse-qc\src\param_opt.py

seed:  0

Traceback (most recent call last):

  File "C:\pythonProject\fourier-pulse-qc\src\param_opt.py", line 68, in <module>

    result = gp_minimize(

             ^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\optimizer\gp.py", line 281, in gp_minimize

    return base_minimize(

           ^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\optimizer\base.py", line 333, in base_minimize

    result = optimizer.tell(next_x, next_y)

             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\optimizer\optimizer.py", line 570, in tell

    return self._tell(x, y, fit=fit)

           ^^^^^^^^^^^^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\optimizer\optimizer.py", line 637, in _tell

    values = _gaussian_acquisition(

             ^^^^^^^^^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\acquisition.py", line 59, in _gaussian_acquisition

    func_and_grad = gaussian_ei(X, model, y_opt, xi, return_grad)

                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\acquisition.py", line 299, in gaussian_ei

    mu, std = model.predict(X, return_std=True)

              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\learning\gaussian_process\gpr.py", line 332, in predict

    K_trans = self.kernel_(X, self.X_train_)

              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\sklearn\gaussian_process\kernels.py", line 868, in __call__

    return self.k1(X, Y) + self.k2(X, Y)

           ^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\sklearn\gaussian_process\kernels.py", line 968, in __call__

    return self.k1(X, Y) * self.k2(X, Y)

                           ^^^^^^^^^^^^^

  File "C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\sklearn\gaussian_process\kernels.py", line 1726, in __call__

    K = (1.0 + K + K**2 / 3.0) * np.exp(-K)

                   ~^^~

numpy._core._exceptions._ArrayMemoryError: Unable to allocate 15.9 MiB for an array with shape (10000, 209) and data type float64


Process finished with exit code 1


###########################################
n_calls 500, 1seed ~ 4h with CNOT_pulseNew:
--------------------
seed:  0
Restart 1:
  Best parameters: g=0.05, ds=1.0728385125463975, cnot_dur=239, cnot_p=1.7554873088999543, cnot_sigma=1.5
  Maximum similarity: 0.9557507462886321
--------------------

########################################
########################################
ORIGINAL CNOT_pulse2
def CNOT_pulseOriginal(current_state, control_qubit, target_qubit, omega_list, g, drive_strength):
    """
    Implements a CNOT gate at the pulse level using cross-resonance with compensating single-qubit gates.
    """
    num_qubits = int(np.log2(current_state.dim))
    t_span = np.linspace(0, duration * dt_, duration + 1)

    # First, apply RX(π/2) on control qubit
    theta = np.pi / 2
    center = duration * dt_ / 2

    def envelope(t): return np.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    integral, _ = quad(envelope, t_span[0], t_span[-1])
    strength_scale = 0.3183109217857033
    drive_strength_rx = theta / integral * strength_scale

    H_drive_control = operator_on_qubit(drive_hamiltonian(drive_strength_rx), control_qubit, num_qubits)
    H_static_multi = sum_operator(static_hamiltonian(omega_list[control_qubit]), num_qubits)
    ham_solver = Solver(static_hamiltonian=H_static_multi, hamiltonian_operators=[H_drive_control], rotating_frame=H_static_multi)

    def gaussian_envelope(t): return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    gaussian_signal = Signal(envelope=gaussian_envelope, carrier_freq=omega_list[control_qubit], phase=0.0)
    state = ham_solver.solve(t_span=t_span, y0=current_state, method='jax_odeint', signals=[gaussian_signal]).y[-1]

    # Then RX(-π/2) on target qubit
    theta = -np.pi / 2
    drive_strength_rx = theta / integral * strength_scale
    H_drive_target = operator_on_qubit(drive_hamiltonian(drive_strength_rx), target_qubit, num_qubits)
    H_static_multi = sum_operator(static_hamiltonian(omega_list[target_qubit]), num_qubits)
    ham_solver = Solver(static_hamiltonian=H_static_multi, hamiltonian_operators=[H_drive_target], rotating_frame=H_static_multi)
    gaussian_signal = Signal(envelope=gaussian_envelope, carrier_freq=omega_list[target_qubit], phase=0.0)
    state = ham_solver.solve(t_span=t_span, y0=state, method='jax_odeint', signals=[gaussian_signal]).y[-1]

    # Now the cross-resonance pulse (original CNOT_pulse core)
    H_static_multi = Operator(np.zeros((2 ** num_qubits, 2 ** num_qubits), dtype=complex))
    for k in range(num_qubits): H_static_multi += operator_on_qubit(static_hamiltonian(omega_list[k]), k, num_qubits)
    H_static_multi += coupling_hamiltonian(num_qubits, control_qubit, target_qubit, g)
    H_drive_control = operator_on_qubit(drive_hamiltonian(drive_strength), control_qubit, num_qubits)
    ham_solver = Solver(static_hamiltonian=H_static_multi, hamiltonian_operators=[H_drive_control], rotating_frame=H_static_multi)

    def gaussian_envelope(t): return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    gaussian_signal = Signal(envelope=gaussian_envelope, carrier_freq=omega_list[target_qubit], phase=0.0)
    state = ham_solver.solve(t_span=t_span, y0=state, method='jax_odeint', signals=[gaussian_signal]).y[-1]

    # After CR, apply RX(π/2) on control
    theta = np.pi / 2
    drive_strength_rx = theta / integral * strength_scale
    H_drive_control = operator_on_qubit(drive_hamiltonian(drive_strength_rx), control_qubit, num_qubits)
    H_static_multi = sum_operator(static_hamiltonian(omega_list[control_qubit]), num_qubits)
    ham_solver = Solver(static_hamiltonian=H_static_multi, hamiltonian_operators=[H_drive_control], rotating_frame=H_static_multi)
    gaussian_signal = Signal(envelope=gaussian_envelope, carrier_freq=omega_list[control_qubit], phase=0.0)
    state = ham_solver.solve(t_span=t_span, y0=state, method='jax_odeint', signals=[gaussian_signal]).y[-1]

    # Then RX(-π/2) on target
    theta = -np.pi / 2
    drive_strength_rx = theta / integral * strength_scale
    H_drive_target = operator_on_qubit(drive_hamiltonian(drive_strength_rx), target_qubit, num_qubits)
    H_static_multi = sum_operator(static_hamiltonian(omega_list[target_qubit]), num_qubits)
    ham_solver = Solver(static_hamiltonian=H_static_multi, hamiltonian_operators=[H_drive_target], rotating_frame=H_static_multi)
    gaussian_signal = Signal(envelope=gaussian_envelope, carrier_freq=omega_list[target_qubit], phase=0.0)
    state = ham_solver.solve(t_span=t_span, y0=state, method='jax_odeint', signals=[gaussian_signal]).y[-1]

    return None, None, state

#############################################################
#############################################################
OLD RX PULSE###########
def RX_pulseALL(theta, current_state, plot_prob=False, plot_blochsphere=False):
    """
    Implements an RX gate (rotation around X-axis) by angle theta on all qubits in current_state.
    Uses a constant drive Hamiltonian with X operator, with final state transformed to lab frame.
    """
    num_qubits = int(np.log2(current_state.dim))  # Determine number of qubits from state vector dimension
    # expected_state = current_state.evolve(RZGate(theta).control(num_qubits))

    t_span = np.linspace(0, duration * dt_, duration + 1)

    # RX:
    center = duration * dt_ / 2
    def envelope(t):
        return np.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    integral, _ = quad(envelope, t_span[0], t_span[-1])
    # Calculate drive_strength
    strength_scale = 0.3183109217857033
    drive_strength = theta / integral
    drive_strength = drive_strength * strength_scale

    # Construct multi-qubit static and drive Hamiltonians
    H_static_single = static_hamiltonian(omega=omega)
    H_drive_X_single = drive_hamiltonian(drive_strength)

    H_static_multi = sum_operator(H_static_single, num_qubits)
    H_drive_X_multi = sum_operator(H_drive_X_single, num_qubits)

    ham_solver = Solver(
        static_hamiltonian=H_static_multi,
        hamiltonian_operators=[H_drive_X_multi],
        rotating_frame=H_static_multi
    )

    def gaussian_envelope(t):
        center = duration * dt_ / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,  # No oscillation for Z drive
        phase=0.0
    )

    result = ham_solver.solve(
        t_span=t_span,
        y0=current_state,
        method='jax_odeint',
        signals=[gaussian_signal]
    )

    # Transform final state from rotating frame to lab frame
    # t_max = t_span[-1]
    # U_static = expm(-1j * H_static_multi * t_max)
    # final_state_rot = result.y[-1].data
    # final_state_lab = U_static @ final_state_rot
    # final_state_lab = Statevector(final_state_lab)

    # Compute probabilities (frame-invariant)
    # state_probs = prob(result.y)
    # final_probs = prob(result.y[-1])

    # Compute overlap in lab frame
    # ol = overlap(expected_state, final_state_lab)

    # Optionally transform all states for plotting (lab frame)
    # if plot_prob:
    #     plot_probabilities
    # if plot_blochsphere:
    #     trajectory_lab = []
    #     for state in result.y:
    #         # print(f"state.data shape: {state.data.shape}")
    #         trajectory_lab.append(Statevector(U_static @ state.data))
    #     bloch_sphere_multiqubit_trajectory(trajectory_lab, list(range(num_qubits)), False)

    return None, None, result.y
##################################
##################################
0 for correct expected CNOT
Restart 1:
  Best parameters: g=0.777115530224123, ds=1.6298912697634949, p=0.32050792582482457
  Maximum similarity: 0.7701242579011847
--------------------
Best parameters: g=0.777115530224123, ds=1.6298912697634949, p=0.32050792582482457
Maximum similarity: 0.7701242579011847


Expected statevector: [ 0.5+0.j   0. -0.5j -0.5+0.j   0. -0.5j]
Best statevector so far: [ 6.16662418e-02+0.00551691j  2.74453624e-02-0.45269502j
 -5.19297488e-01+0.18348464j -1.62053599e-04-0.69795778j]



0 LONG RUN
1
2
3
4
Restart 1:
  Best parameters: g=1.315446016350669, ds=0.30701325608532004, p=1.8972146006269979
  Maximum similarity: 0.6728476895131236
--------------------
Restart 2:
  Best parameters: g=1.3081522173069757, ds=0.30847185995429055, p=1.883524550865514
  Maximum similarity: 0.6719733271892951
--------------------
Restart 3:
  Best parameters: g=1.310251962883061, ds=0.30989365930973706, p=1.8881834520743022
  Maximum similarity: 0.6732092473414183
--------------------
Restart 4:
  Best parameters: g=1.310445965296242, ds=0.30872279877786996, p=1.8805004506367184
  Maximum similarity: 0.6738940734687529
--------------------
Restart 5:
  Best parameters: g=1.315393503164784, ds=0.30790869979769625, p=1.9028814702359753
  Maximum similarity: 0.6720774866579357
--------------------
Best parameters: g=1.310445965296242, ds=0.30872279877786996, p=1.8805004506367184
Maximum similarity: 0.6738940734687529


Expected statevector: [ 0.5+0.j  -0.5+0.j   0. -0.5j  0. -0.5j]
Best statevector so far: [ 0.4989624 +0.03224559j -0.3621654 -0.00240185j -0.03272727-0.0100058j
 -0.59664767-0.51153492j]


 -----------------------------------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------------------------------
SIMILARITY TEST CASES:

# Test cases

target1 = np.array([1 + 0j, 0 + 0j, 0 + 0j, 0 + 0j])
actual1 = np.array([1 + 0j, 0 + 0j, 0 + 0j, 0 + 0j])
print(f"Test 1: Similarity = {statevector_similarity(target1, actual1)}")  # Expected: 1.0

target2 = np.array([1 + 0j, 0 + 0j, 0 + 0j, 0 + 0j])
actual2 = np.array([0.9 + 0.05j, 0.1 - 0.05j, 0 + 0j, 0 + 0j])
print(f"Test 2: Similarity = {statevector_similarity(target2, actual2)}")  # Expected: close to 1.0, but slightly less

target3 = np.array([1 + 0j, 0 + 0j, 0 + 0j, 0 + 0j])
actual3 = np.array([0.5 + 0.5j, 0.5 - 0.5j, 0 + 0j, 0 + 0j])
print(f"Test 3: Similarity = {statevector_similarity(target3, actual3)}")  # Expected: significantly less than 1.0

target4 = np.array([1 + 0j, 0 + 0j, 0 + 0j, 0 + 0j])
actual4 = np.array([0 + 1j, 0 + 0j, 0 + 0j, 0 + 0j])
print(f"Test 4: Similarity = {statevector_similarity(target4, actual4)}") #Expected: 0.0

target5 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0+0j])
actual5 = np.array([0.707 + 0.0001j, 0.707 + 0.0001j, 0+0j, 0+0j])
print(f"Test 5: similarity = {statevector_similarity(target5, actual5)}") #expected: close to 1.0

target6 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0+0j])
actual6 = np.array([0.707 + 0.2j, 0.707 + 0.2j, 0+0j, 0+0j])
print(f"Test 6: similarity = {statevector_similarity(target6, actual6)}") #expected: much less than 1.0.

target7 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0+0j])
actual7 = np.array([0 + 0j, 1+0j, 0+0j, 0+0j])
print(f"Test 7: similarity = {statevector_similarity(target7, actual7)}") #expected: 0.0

target8 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0+0j])
actual8 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0.099999j])
print(f"Test 8: similarity = {statevector_similarity(target8, actual8)}") #expected: close to 1.0

target9 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0+0j])
actual9 = np.array([0.707 + 0j, 0.707 + 0j, 0+0j, 0.100001j])
print(f"Test 9: similarity = {statevector_similarity(target9, actual9)}") #expected: much less than 1.0.



0
1
2
C:\pythonProject\fourier-pulse-qc\.venv\Lib\site-packages\skopt\optimizer\optimizer.py:517: UserWarning: The objective has been evaluated at point [2.0, 0.0, 0.0] before, using random point [0.37965087305147793, 0.98909290726395, 1.0440792700869101]
  warnings.warn(
3
4
Restart 1:
  Best parameters: g=1.3725219567952514, ds=0.07875360720683314, p=1.9185437548952768
  Maximum similarity: 0.5
--------------------
Restart 2:
  Best parameters: g=1.6236773134104694, ds=0.05618158945906935, p=1.0344874951673089
  Maximum similarity: 0.5
--------------------
Restart 3:
  Best parameters: g=2.0, ds=0.0, p=0.8649267652629364
  Maximum similarity: 0.5
--------------------
Restart 4:
  Best parameters: g=1.9937032401894517, ds=0.05883960294100367, p=0.15286107841456278
  Maximum similarity: 0.5
--------------------
Restart 5:
  Best parameters: g=1.265926208784922, ds=0.010318297113255605, p=1.1447129825203604
  Maximum similarity: 0.5
--------------------
Best parameters: g=1.3725219567952514, ds=0.07875360720683314, p=1.9185437548952768
Maximum similarity: 0.5


Expected statevector: [ 0.5+0.j  -0.5+0.j   0. -0.5j  0. -0.5j]
Best statevector so far: [ 0.51348487+0.03067802j -0.04073246-0.46217222j  0.00621588-0.48172334j
 -0.5339753 -0.05389251j]


 ###########
 ###########
     if plot:
        tolerance = 0.1
        diff_values = np.linspace(0, 2 * tolerance, 100)  # Differences from 0 to 2*tolerance

        quadratic_similarity = 1.0 - (diff_values / tolerance) ** 2
        exponential_similarity = np.exp(-diff_values / tolerance)

        plt.plot(diff_values, quadratic_similarity, label="Quadratic Scaling")
        plt.plot(diff_values, exponential_similarity, label="Exponential Scaling")
        plt.xlabel("Component Difference")
        plt.ylabel("Similarity")
        plt.title("Comparison of Scaling Functions")
        plt.legend()
        plt.grid(True)
        plt.show()
##########################################
PARAM OPT RESULTS: HIGHEST FIDELITY
search_space = [
    Real(0, 1, name='g'),
    Real(0, 1, name='ds'),
    Real(0, 1, name='p'),
]
num_restarts = 5
n_initial_points = 10
n_calls = 100

Restart 1:
  Best parameters: g=0.9241352713700527, ds=0.3251353530692094, p=0.9349890550262165
  Maximum fidelity: 0.9082175433130879
--------------------
Restart 2:
  Best parameters: g=0.9239670742667196, ds=0.3245031103680644, p=0.940966337349962
  Maximum fidelity: 0.908210208474459
--------------------
Restart 3:
  Best parameters: g=0.9243751770044104, ds=0.32501586285719314, p=0.9402407086499058
  Maximum fidelity: 0.9082346581058685
--------------------
Restart 4:
  Best parameters: g=0.924134061665496, ds=0.32531508748406807, p=0.9391674710008715
  Maximum fidelity: 0.9082269444700671
--------------------
Restart 5:
  Best parameters: g=0.9243829429470746, ds=0.32507000352340254, p=0.940620978682747
  Maximum fidelity: 0.9082341086310716
--------------------
Best parameters: g=0.9243751770044104, ds=0.32501586285719314, p=0.9402407086499058
Maximum fidelity: 0.9082346581058685

##########################################
def CNOT_fidelity(g, ds, p):
    omega_list = [5.0, 4.9]
    _, _, trajectory_afterCNOT = CNOT_pulse(perfect_statevector_afterRX, 0, 1, omega_list, g=g, ds=ds, phase_test=p)
    fid = fidelity(trajectory_afterCNOT[-1], perfect_statevector_afterCNOT.data)
    return fid

# result = gp_minimize(
#     objective_function,
#     search_space,
#     n_calls=50,  # Number of function evaluations
#     random_state=42,
#     n_jobs=-1,
# )
#
# best_params = result.x
# best_value = -result.fun  # Negate back to original value
#
# print(f"Best parameters: g={best_params[0]}, ds={best_params[1]}, p={best_params[2]}")
# print(f"Maximum fidelity: {best_value}")


# results: Best parameters: g=0.9247234358392111, ds=0.32334595561495116, p=1.0
# Maximum fidelity: 0.9059860925782496

# import numpy as np
# from skopt import BayesSearchCV
# from skopt.space import Real, Integer
# from sklearn.base import BaseEstimator, TransformerMixin  # Import dummy estimator classes
# from sklearn.model_selection import KFold
#
# from src.pulse_gates import *
#
# single_split_cv = KFold(n_splits=1)
#
# def CNOT_fidelity(g, ds, p):
#     num_qubits = 2
#     theta = np.pi / 2
#
#     init_state = GROUND_STATE(num_qubits)
#
#     _, _, trajectory_afterRX = RX_pulseMULT(theta, init_state, False, False)
#
#     omega_list = [5.0, 4.9]
#     _, _, trajectory_afterCNOT = CNOT_pulse(trajectory_afterRX[-1], 0, 1, omega_list, g=g, drive_strength=ds, phase_test=p)
#
#     fid = fidelity(trajectory_afterCNOT[-1], np.array([0.5 + 0.j, -0.5 + 0.j, 0. - 0.5j, 0. - 0.5j]))
#
#     return fid
#
#
# search_space = {
#     'g': Real(0, 1),
#     'ds': Real(0, 1),
#     'p': Real(0, 1),
# }
#
# def objective_function(params):
#     return -CNOT_fidelity(params['g'], params['ds'], params['p'])
#
#
# def objective_function(params):
#     return -CNOT_fidelity(params['g'], params['ds'], params['p'])
#
# class DummyEstimator(BaseEstimator, TransformerMixin):
#     def fit(self, X, y=None):
#         return self
#
#     def transform(self, X):
#         return X
#
#
# dummy_estimator = DummyEstimator()
#
#
# opt = BayesSearchCV(
#     dummy_estimator,
#     search_space,
#     scoring=objective_function,
#     n_iter=50,  # Number of iterations (adjust as needed)
#     random_state=42,    # for repeatability
#     n_jobs=-1,
#     cv=single_split_cv,
# )
#
# X_dummy = np.zeros((1, 1))  # Create a dummy 2D array
# y_dummy = np.zeros(1)  # Create a dummy 1D array
#
# opt.fit(X_dummy, y_dummy)
# # We are not fitting a model, but rather optimizing a function.
#
# # Get the best parameters and the corresponding maximum value
# best_params = opt.best_params_
# best_value = -opt.best_score_  # negate back to original value.
#
# print(f"Best parameters: {best_params}")
# print(f"Maximum value: {best_value}")
#
#
# # Example of how to access the found values
# print(f"Best x: {best_params['x']}")
# print(f"Best y: {best_params['y']}")
# print(f"Best z: {best_params['z']}")
#


##########################################
def Hadamard_pulse(current_state, target_qubit):
    """
    Implements a Hadamard gate on a specific qubit at the pulse level using an RX(pi/2) pulse.

    Args:
        current_state (Statevector): Initial quantum state.
        target_qubit (int): Index of the qubit to apply the Hadamard gate to.

    Returns:
        tuple: (None, None, evolved_state) to match RX_pulseMULT and CNOT_pulse output format.
    """
    num_qubits = int(np.log2(current_state.dim))  # Number of qubits from state dimension

    # Time span for evolution
    t_span = np.linspace(0, duration * dt_, duration + 1)

    drive_strength = 0.042780849440995694

    # Static Hamiltonian: Only the target qubit's frequency term (others could be added if needed)
    H_static_single = static_hamiltonian(omega)
    H_static_multi = operator_on_qubit(H_static_single, target_qubit, num_qubits)

    # Drive Hamiltonian: Applied only to the target qubit
    H_drive_single = drive_hamiltonian(drive_strength)
    H_drive_target = operator_on_qubit(H_drive_single, target_qubit, num_qubits)

    # Define the solver
    ham_solver = Solver(
        static_hamiltonian=H_static_multi,
        hamiltonian_operators=[H_drive_target],
        rotating_frame=H_static_multi
    )

    # Gaussian envelope for the pulse
    def gaussian_envelope(t):
        center = duration * dt_ / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    # Signal with carrier frequency set to the target qubit's frequency
    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,  # Drive at the qubit's frequency
        phase=0.0  # No phase shift needed for basic RX-based Hadamard
    )

    # Solve the time evolution
    result = ham_solver.solve(
        t_span=t_span,
        y0=current_state,
        method='jax_odeint',
        signals=[gaussian_signal]
    )
    # traj = swap_amplitudes(result.y)

    return None, None, result.y

#####
print(quantify_entanglement(BELL_STATE))


entanglement_results_ghz = quantify_entanglement(GHZ_STATE)
print(entanglement_results_ghz)


entanglement_results_non = quantify_entanglement(GROUND_STATE(2))
print(entanglement_results_non)



###
old CNOT, no target and control parameter, only for two qubit systems:

def CNOT_Pulse(drive_strength, sigma, current_state, plot_prob=False, plot_blochsphere=False):
    """
    Implements a CNOT gate with qubit 0 as control and qubit 1 as target.
    Sequence: H on control, conditional pi pulse on target, H on control.
    """
    omega = 5.0
    duration_H = 120  # Duration for each H pulse
    duration_pi = 120  # Duration for conditional pi pulse
    total_duration = 2 * duration_H + duration_pi
    t_span = np.linspace(0, total_duration * dt_, total_duration + 1)

    # Expected state for CNOT (for |00> -> |00>, |10> -> |11>, etc.)
    # Depends on input, so we'll compute overlap with ideal CNOT matrix applied to initial state
    # cnot_matrix = Operator(np.array([
    #     [1, 0, 0, 0],
    #     [0, 1, 0, 0],
    #     [0, 0, 0, 1],
    #     [0, 0, 1, 0]])
    # )
    # expected_state = cnot_matrix @ current_state

    # Two-qubit static Hamiltonian
    # H_static_2q = 0.5 * omega * (Z0 + Z1)
    P1a = np.array([[0, 0], [0, 1]])

    H_static_2q = 0.5 * omega * (Z0 + Z1).astype(np.complex128)

    # Drive Hamiltonians
    H_drive_control = np.kron(X, np.eye(2)).astype(np.complex128)  # Drive for H pulses on control qubit (4x4)
    H_drive_target = np.kron(P1a, X).astype(np.complex128)  # Conditional drive: |1><1| ⊗ X on target

    print(H_static_2q.shape, "H_static_2q shape")
    print(H_drive_control.shape, "h_drive_control shape")
    print(H_drive_target.shape, "h_drive_target shape")

    ham_solver = Solver(
        static_hamiltonian=H_static_2q,
        hamiltonian_operators=[H_drive_control, H_drive_target],
        rotating_frame=H_static_2q
    )

    def gaussian_H1(t):  # First H pulse, centered at duration_H/2
        center = duration_H * dt_ / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2)) * (t <= duration_H * dt_)

    def gaussian_pi(t):  # Conditional pi pulse, centered at duration_H + duration_pi/2
        center = (duration_H + duration_pi / 2) * dt_
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2)) * \
            (t > duration_H * dt_) * (t <= (duration_H + duration_pi) * dt_)

    def gaussian_H2(t):  # Second H pulse, centered at duration_H + duration_pi + duration_H/2
        center = (duration_H + duration_pi + duration_H / 2) * dt_
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2)) * (t > (duration_H + duration_pi) * dt_)

    # Combine signals for control qubit
    def control_signal(t):
        return gaussian_H1(t) + gaussian_H2(t)

    signals = [
        Signal(envelope=control_signal, carrier_freq=omega, phase=np.pi / 2),  # Control qubit H pulses
        Signal(envelope=gaussian_pi, carrier_freq=omega, phase=0)  # Target qubit conditional pi pulse
    ]

    # Solve dynamics
    result = ham_solver.solve(
        t_span=t_span,
        y0=current_state,
        method='jax_odeint',
        signals=signals
    )

    # Compute probabilities and overlap
    state_probs = prob(result.y)  # Assumes prob is updated for 4D states (|00>, |01>, |10>, |11>)
    final_state = result.y[-1]
    # ol = overlap(expected_state, final_state)

    final_probs = np.zeros(4)  # Two-qubit probabilities
    final_probs[0] = state_probs[-1, 0]  # |00>
    final_probs[1] = state_probs[-1, 1]  # |01>
    final_probs[2] = state_probs[-1, 2]  # |10>
    final_probs[3] = state_probs[-1, 3]  # |11>

    if plot_prob:
        plot_probabilities(t_span, state_probs)
    if plot_blochsphere:
        bloch_sphere_trajectory(result.y)  # Note: May need adjustment for two-qubit visualization

    return drive_strength, sigma, final_probs, result.y


def X_fidelity(u):
    return jnp.abs(jnp.sum(SIGMA_X * u))**2 / 4.


def tensor_product_2(operator, num_qubits):
    """Creates a tensor product of operator with identities for num_qubits."""
    result = operator
    for _ in range(num_qubits - 1):
        result = np.kron(result, operator)
    return result

# TWO QUBIT STATES: |ψ⟩ = α|00⟩ + β|01⟩ + γ|10⟩ + δ|11⟩ s.t. |α|² + |β|² + |γ|² + |δ|² = 1
GROUND_GROUND = Statevector([1.0, 0.0, 0.0, 0.0])
GROUND_EXCITED = Statevector([0.0, 1.0, 0.0, 0.0])
BELL_STATE = Statevector([1/np.sqrt(2), 0.0, 0.0, 1/np.sqrt(2)])
SUPERPOSITION_PRODUCT = Statevector([0.5, 0.5, 0.5, 0.5])

def RANDOM_STATE(num_q=1):
    """
    Generates a random pure quantum statevector for a given number of qubits.

    Args:
        num_q (int): The number of qubits for the statevector.

    Returns:
        Statevector: A random pure quantum statevector.
    """
    if num_q <= 0:
        raise ValueError("Number of qubits must be at least 1.")

    num_amplitudes = 2**num_q
    amplitudes = np.random.randn(num_amplitudes) + 1j * np.random.randn(num_amplitudes)
    norm = np.sqrt(np.sum(np.abs(amplitudes)**2))

    if norm == 0:
        raise ValueError("Generated amplitudes have a norm of zero. This is unlikely but possible with random generation.")

    normalized_amplitudes = amplitudes / norm
    return Statevector(normalized_amplitudes)

def RANDOM_STATE_old():
    alpha_real = np.random.uniform(-1, 1)
    alpha_imag = np.random.uniform(-1, 1)
    beta_real = np.random.uniform(-1, 1)
    beta_imag = np.random.uniform(-1, 1)

    alpha = alpha_real + 1j * alpha_imag
    beta = beta_real + 1j * beta_imag

    norm = np.sqrt(np.abs(alpha) ** 2 + np.abs(beta) ** 2)

    alpha /= norm
    beta /= norm

    return Statevector([alpha, beta])



from the original GATEONEQFOURIER

    # @staticmethod
    # def compute_expectations(qc, simulator, shots):
    #     backend = qiskit_aer.Aer.get_backend(simulator)
    #     if simulator == 'qasm_simulator':
    #         qc.measure_all()
    #         result = backend.run(qc, shots=shots).result()
    #         counts = result.get_counts()
    #         probability_0 = counts.get('0', 0) / shots  # Probability of measuring |0> state - expectation value
    #     else:  # if simulator == 'statevector_simulator':
    #         result = backend.run(qc).result()
    #         statevector = result.get_statevector()
    #         probability_0 = prob(statevector.data[0])
    #     return 2 * probability_0 - 1  # Map to [-1, 1]
    #
    # def predict_interval(self, simulator, shots, x, plot=False):
    #     f_x = []
    #     for i in range(len(x)):
    #         qc = self.define_circuit(x[i])
    #         f_x.append(self.compute_expectations(qc, simulator, shots).item())
    #
    #     if plot:
    #         fx.plot_fx_advanced(x, f_x, "Gate level Fourier Model Prediction")
    #     return f_x
    #
    # def predict_single(self, simulator, shots, x):
    #     qc = self.define_circuit(x)
    #     f_x = self.compute_expectations(qc, simulator, shots)
    #     return f_x

old param generator:
def random_parameter2(repetitions, layer, qubits):
    """

    :param repetitions: number of parameter dependent gates
    :param layer: number of layer
    :param qubits: number of qubits
    :return: set of random weights
    """
    np_arr = 2 * np.pi * np.random.random(size=(repetitions, layer, qubits))
    return np_arr.flatten().tolist()

# def random_weights():
#     return 2 * np.pi * np.random.random(size=(2, n_ansatz_layers, n_qubits))



parameter_set = np.array(num_samples*[[[[+4329999.2948790318043715], [-50099999.487549821951812], [-900000.267787482006577]]]])

qm = qm(num_qubits, num_layer, parameter_set[0])
f_x = qm.predict_interval(simulator, shots, x, plot=False)

plot_fx_advanced(x, f_x)


########################################
########################################
OLD PULSE ANALYSIS
########################################
import math
import numpy as np

from src.pulse_gates import *
from utils.visualize import bloch_sphere

from scipy.optimize import minimize

current_state = PHASE_SHIFTED_STATE
samples = 100
sigma = 15
theta = jnp.pi/2

# for sigma = 15
RX = 0.04278068369641117
H = 0.042780849440995694       # does not work when init state is superposition
RZ = 0.4581489313344305
H2 = np.pi / (math.sqrt(2*np.pi) * sigma)
# good estimate for H is np.pi / (math.sqrt(2*np.pi) * sigma)

RX = np.linspace(0.042780631757944214, 0.042780641757944214, samples)

for _ in range(samples):
    ds, s, probs, ol, result = RX_pulse(theta, RX[_], sigma, current_state, plot_prob=False, plot_blochsphere=False)

    print(ds, "final:", result[-1].data, "|0>", probs[0], "---", "|1>", probs[1], "---", )
    # bloch_sphere.plot_bloch_sphere(result)
    # if ol > 0.99995:
    #     print("found")
        # bloch_sphere.plot_bloch_sphere(result)

# final_vector = Statevector([1.0 + 0.0j, 0.0 + 0.0j])
#
# def distance_to_target(rx):
#     """Calculates the Euclidean distance to the target state."""
#     ds, s, probs, ol, result = RX_pulse(theta, rx, sigma, current_state, plot_prob=False, plot_blochsphere=False)
#     return np.linalg.norm(result[-1].data - final_vector.data)
#
# initial_rx = RX

# USING BFGS
# result = minimize(distance_to_target, initial_rx, method='BFGS')
#
# best_rx = result.x[0]
# min_distance = result.fun
#
# print(f"Best RX: {best_rx}, Minimum Distance: {min_distance}")
# -> Scipy minimize found Best RX: 0.042780631757944214, Minimum Distance: 0.0006575298896276235


# Minimize the distance using Nelder-Mead
# result = minimize(distance_to_target, initial_rx, method='Nelder-Mead')
#
# best_rx = result.x[0]
# min_distance = result.fun
#
# print(f"Best RX: {best_rx}, Minimum Distance: {min_distance}")
# -> Best RX: 0.04278068369641117, Minimum Distance: 0.0006575304094206627




########################################
########################################
pulse level original drivestrength for pi/2
RX = 0.042780631757944214
H = 0.042780849440995694
RZ = 0.4581489313344305


# def calculate_envelope_integral(duration, _dt, sigma):
#     """
#     Calculate the integral of the gaussian envelope from 0 to duration*_dt.
#     """
#     t_span = np.linspace(0, duration * _dt, duration + 1)
#     center = duration * _dt / 2
#
#     def gaussian_envelope(t):
#         return np.exp(-((t - center) ** 2) / (2 * sigma ** 2))
#
#     integral, _ = quad(gaussian_envelope, t_span[0], t_span[-1])
#     return integral
#
# def estimate_rx_drive_strength(theta, sigma, k, duration=120, _dt=0.1):
#     """
#     Estimate drive_strength for RX gate based on rotation angle theta.
#     """
#
#     integral = calculate_envelope_integral(duration, _dt, sigma)
#     drive_strength = (theta + 2 * np.pi * k) / (2 * integral)
#     return drive_strength



Working only for np.pi/2
def RX_pulse(theta, drive_strength, sigma, current_state, plot_prob=False, plot_blochsphere=False):
    omega = 5.0
    duration = 120
    phase = 0
    expected_state = np.array([np.cos(theta / 2), -1j * np.sin(theta / 2)])
    k = -0.179 #= -0.0908450021334925
    drive_strength = estimate_rx_drive_strength(theta, sigma, k, duration)
    # print("Drive strength: ", drive_strength)
    return pulse(drive_strength=drive_strength, sigma=sigma, duration=duration, omega=omega, phase=phase, expected_state=expected_state,
                 current_state=current_state,
                 plot=plot_prob, bool_blochsphere=plot_blochsphere)





k = 5.524648297886591
drivestrength_RZ = (theta/2 - 5.0/2 * 12 + 2 * np.pi * k) / 12
print(drivestrength_RZ)

def RZ_pulse(theta, drive_strength, sigma, current_state, plot_prob=False, plot_blochsphere=False):
    omega = 5.0
    duration = int(theta / (omega * 0.1))
    if duration < 1:
        duration = 1
    phase = np.pi
    expected_state = np.array([np.exp(-1j * theta / 2), 0])
    return pulse(drive_strength=drive_strength, sigma=sigma, duration=duration, omega=omega, phase=phase, expected_state=expected_state,
                 current_state=current_state,
                 plot=plot_prob, bool_blochsphere=plot_blochsphere)


#####################################

ds, s, probs, ol, result = RX_pulse(RX, sigma, current_state, plot_prob=False, plot_blochsphere=False)
    print("|0>", probs[0], "---", "|1>", probs[1], "---", ds, s, "final:", result[-1].data)

ds, s, probs, ol, result = RZ_pulse(RZ, sigma, current_state, plot_prob=False, plot_blochsphere=False)
    print("|0>", probs[0], "---", "|1>", probs[1], "---", ds, s, "final:", result[-1].data)



#####################################
drive_strength_samples = np.linspace(0, 0.02277960635661175, samples)
sigma_samples = np.linspace(15, 15, samples)
def h_pulse(drive_strength, sigma, plot, bool_blochsphere=False):
    expected_state = np.array([1, 1]) / np.sqrt(2)
    phase = np.pi / 2

    omega = 5.0                         # v
    drive_strength = drive_strength     # r
    sigma = sigma                       # sigma

    final_probs = np.zeros(2)

    H_static = static_hamiltonian(omega=omega)
    H_drive = drive_hamiltonian(drive_strength=drive_strength)

    ham_solver = Solver(
        static_hamiltonian=H_static,
        hamiltonian_operators=[H_drive],
        rotating_frame=H_static
    )

    duration = 120  # Number of time steps (samples)
    amp = 1.0      # Amplitude, height gaussian bell at peak, default Max
    _dt = 0.1       # Time step in ns
    t_span = np.linspace(0, duration * _dt, duration + 1)   # Tells solver when to check the qubits state

    def gaussian_envelope(t):
        center = duration * _dt / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))

    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,
        phase=phase
    )
    result = ham_solver.solve(
        t_span=t_span,
        y0=INIT_STATE,
        method='jax_odeint',
        signals=[gaussian_signal]
    )
    state_probs = prob(result.y)
    final_state = result.y[-1]
    overlap = np.abs(np.vdot(expected_state, final_state)) ** 2

    final_probs[0] = state_probs[-1, 0]
    final_probs[1] = state_probs[-1, 1]

    if plot:
        plot_probabilities(t_span, state_probs)
    if bool_blochsphere:
        plot_bloch_sphere(result.y)

    return drive_strength, sigma, final_probs, overlap, result.y


def RX_pulse(drive_strength, sigma, theta, plot=False, bool_blochsphere=False):
    final_probs = np.zeros(2)
    omega = 5.0
    H_static = static_hamiltonian(omega=omega)
    H_drive = drive_hamiltonian(drive_strength=drive_strength)
    ham_solver = Solver(
        static_hamiltonian=H_static,
        hamiltonian_operators=[H_drive],
        rotating_frame=H_static
    )
    duration = 120
    amp = 1.0
    _dt = 0.1
    t_span = np.linspace(0, duration * _dt, duration + 1)

    def gaussian_envelope(t):
        center = duration * _dt / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))
    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,
        phase=0  # Set to 0 for X-axis rotation
    )
    result = ham_solver.solve(
        t_span=t_span,
        y0=INIT_STATE,
        method='jax_odeint',
        signals=[gaussian_signal]
    )

    if plot:
        state_probs = np.abs(result.y) ** 2
        plt.figure(figsize=(10, 6))
        plt.plot(t_span, state_probs[:, 0], label="P(|0>)")
        plt.plot(t_span, state_probs[:, 1], label="P(|1>)")
        plt.xlabel("Time (ns)")
        plt.ylabel("Probability")
        plt.title("Qubit State Evolution Under Gaussian Pulse for RX gate")
        plt.legend()
        plt.grid()
        plt.show()
    if bool_blochsphere:
        plot_bloch_sphere(result.y)
    expected_state = np.array([np.cos(theta/2), -1j * np.sin(theta/2)])
    final_state = result.y[-1]
    overlap = np.abs(np.vdot(expected_state, final_state)) ** 2
    state_probs = np.abs(result.y) ** 2
    final_probs[0] = state_probs[-1, 0]
    final_probs[1] = state_probs[-1, 1]
    return drive_strength, sigma, final_probs, overlap, result.y


def RZ_pulse(drive_strength, sigma, theta, plot=False, bool_blochsphere=False):
    final_probs = np.zeros(2)
    omega = 5.0
    H_static = static_hamiltonian(omega=omega)
    H_drive = drive_hamiltonian(drive_strength=drive_strength)
    ham_solver = Solver(
        static_hamiltonian=H_static,
        hamiltonian_operators=[H_drive],
        rotating_frame=H_static
    )
    duration = int(theta / (omega * 0.1))  # Adjust duration for theta, assuming _dt=0.1
    if duration < 1:
        duration = 1
    amp = 1.0
    _dt = 0.1
    t_span = np.linspace(0, duration * _dt, duration + 1)

    def gaussian_envelope(t):
        center = duration * _dt / 2
        return amp * jnp.exp(-((t - center) ** 2) / (2 * sigma ** 2))
    gaussian_signal = Signal(
        envelope=gaussian_envelope,
        carrier_freq=omega,
        phase=0  # Set to 0 for Z-axis alignment
    )
    result = ham_solver.solve(
        t_span=t_span,
        y0=INIT_STATE,
        method='jax_odeint',
        signals=[gaussian_signal]
    )
    if plot:
        state_probs = np.abs(result.y) ** 2
        plt.figure(figsize=(10, 6))
        plt.plot(t_span, state_probs[:, 0], label="P(|0>)")
        plt.plot(t_span, state_probs[:, 1], label="P(|1>)")
        plt.xlabel("Time (ns)")
        plt.ylabel("Probability")
        plt.title("Qubit State Evolution Under Gaussian Pulse for RZ gate")
        plt.legend()
        plt.grid()
        plt.show()
    if bool_blochsphere:
        plot_bloch_sphere(result.y)
    expected_state = np.array([np.exp(-1j*theta/2), 0])  # For |0> initially
    final_state = result.y[-1]
    overlap = np.abs(np.vdot(expected_state, final_state)) ** 2
    state_probs = np.abs(result.y) ** 2
    final_probs[0] = state_probs[-1, 0]
    final_probs[1] = state_probs[-1, 1]
    return drive_strength, sigma, final_probs, overlap, result.y


def estimate_period_zero_crossing(x, f_x):
    zero_crossings = np.where(np.diff(np.sign(f_x)))[0]
    if len(zero_crossings) > 1:
        T_est = np.mean(np.diff(x[zero_crossings])) * 2  # Assuming half-period per crossing
        return T_est
    else:
        return None

def estimate_period(x, f_x):
    peaks, _ = find_peaks(f_x)  # Find local maxima
    if len(peaks) > 1:
        T_est = np.mean(np.diff(x[peaks]))  # Average distance between peaks
        return T_est
    else:
        return None